name;is_unsafe;has_unsafe_ops;has_unsupported_input;has_loop_or_iterator
rc::Rc::<T, A>::drop_slow;true;true;true;false
<sync::Weak<T, A> as core::fmt::Debug>::fmt;false;false;true;false
bstr::<impl core::cmp::PartialEq<borrow::Cow<'a, str>> for &'a core::bstr::ByteStr>::eq;false;false;true;false
slice::<impl [T]>::join;false;false;false;false
boxed::Box::<T, A>::as_mut_ptr;false;true;true;false
rc::Rc::<T>::pin;false;true;false;false
string::String::as_mut_vec;true;false;true;false
<string::String as core::iter::FromIterator<boxed::Box<str, A>>>::from_iter;false;false;false;false
<vec::in_place_drop::InPlaceDrop<T> as core::ops::Drop>::drop;false;true;true;false
<collections::btree::set::CursorMutKey<'_, K, A> as core::fmt::Debug>::fmt;false;false;true;false
<collections::binary_heap::BinaryHeap<T, A> as core::iter::Extend<T>>::extend_one;false;false;true;false
<collections::btree::set::SymmetricDifference<'_, T> as core::fmt::Debug>::fmt;false;false;true;false
<rc::Rc<T, A> as core::cmp::PartialOrd>::ge;false;false;true;false
collections::btree::set::BTreeSet::<T>::new;false;false;false;false
rc::Rc::<T, A>::unwrap_or_clone;false;false;true;false
<&&&&&&&&str as string::SpecToString>::spec_to_string;false;false;false;false
vec::Vec::<T, A>::drain;false;true;true;false
<borrow::Cow<'_, B> as core::fmt::Debug>::fmt;false;false;true;false
<collections::btree::map::ValuesMut<'a, K, V> as core::iter::DoubleEndedIterator>::next_back;false;false;true;false
<core::option::Option<core::option::Option<core::option::Option<bool>>> as vec::is_zero::IsZero>::is_zero;false;false;true;false
str::convert_while_ascii;false;true;true;true
<ffi::c_str::CString as core::fmt::Debug>::fmt;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::new_in;false;false;false;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<BorrowType, K, V, NodeType>, collections::btree::node::marker::Edge>::left_kv;false;true;true;false
<collections::vec_deque::VecDeque<T, A> as core::iter::Extend<&'a T>>::extend_one;false;false;true;false
sync::Arc::<T, A>::from_ptr_in;true;true;true;false
raw_vec::RawVecInner::<A>::from_raw_parts_in;true;true;true;false
<collections::binary_heap::Iter<'_, T> as core::fmt::Debug>::fmt;false;false;true;false
<collections::vec_deque::into_iter::IntoIter<T, A> as core::iter::DoubleEndedIterator>::next_back;false;false;true;false
boxed::thin::WithOpaqueHeader;false;false;true;false
<T as ffi::c_str::CString::new::SpecNewImpl>::spec_new_impl;false;true;false;false
<rc::Rc<T, A> as core::cmp::Ord>::cmp;false;false;true;false
<rc::Weak<T, A> as core::fmt::Debug>::fmt;false;false;true;false
collections::binary_heap::BinaryHeap::<T, A>::allocator;false;false;true;false
sync::Arc::<T, A>::new_cyclic_in;false;true;false;false
<rc::Rc<[T]> as rc::RcFromSlice<T>>::from_slice;false;true;false;false
bstr::<impl core::cmp::PartialOrd<bstr::ByteString> for borrow::Cow<'_, str>>::partial_cmp;false;false;true;false
<collections::vec_deque::into_iter::IntoIter<T, A> as core::iter::Iterator>::size_hint;false;false;true;false
vec::Vec::<T, A>::leak;false;true;true;false
string::String::from_utf8_lossy;false;false;false;true
<collections::btree::map::IntoValues<K, V, A> as core::iter::Iterator>::size_hint;false;false;true;false
<vec::Vec<T, A1> as core::cmp::PartialOrd<vec::Vec<T, A2>>>::partial_cmp;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::try_reserve;false;true;true;false
<vec::splice::Splice<'_, I, A> as core::ops::Drop>::drop;false;true;true;true
collections::btree::set::CursorMut::<'a, T, A>::insert_after_unchecked;true;true;true;false
vec::Vec::<T, A>::with_capacity_in;false;false;false;false
<string::String as core::convert::From<boxed::Box<str>>>::from;false;false;false;false
bstr::<impl core::cmp::PartialEq<borrow::Cow<'a, core::bstr::ByteStr>> for &'a core::bstr::ByteStr>::eq;false;false;true;false
collections::linked_list::LinkedList::<T, A>::cursor_front_mut;false;false;true;false
collections::binary_heap::BinaryHeap::<T, A>::as_slice;false;false;true;false
<collections::btree::map::RangeMut<'a, K, V> as core::iter::Iterator>::max;false;false;true;false
<boxed::Box<I, A> as boxed::iter::BoxIter>::last::some;false;false;true;false
collections::btree::split::<impl collections::btree::node::NodeRef<collections::btree::node::marker::Owned, K, V, collections::btree::node::marker::LeafOrInternal>>::calc_split_length;false;false;true;false
boxed::convert::<impl core::convert::From<&str> for boxed::Box<(dyn core::error::Error + 'a)>>::from;false;false;false;false
collections::btree::node::move_to_slice;false;true;true;false
<borrow::Cow<'_, B> as core::fmt::Display>::fmt;false;false;true;false
collections::btree::set::CursorMutKey::<'a, T, A>::peek_prev;false;false;true;false
string::String::from_utf16be;false;true;false;true
<collections::vec_deque::VecDeque<T, A> as core::clone::Clone>::clone_from;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::get;false;true;true;false
<string::String as core::iter::Extend<core::ascii::Char>>::extend;false;false;true;false
sync::Arc::<T>::try_new;false;true;false;false
sync::Weak::<T, A>::as_ptr;false;true;true;false
<(E, F, G, H) as vec::is_zero::IsZero>::is_zero;false;false;false;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<collections::btree::node::marker::Mut<'a>, K, V, collections::btree::node::marker::Internal>, collections::btree::node::marker::KV>::consider_for_balancing;false;true;true;false
vec::Vec::<T, A>::reserve_exact;false;false;true;false
collections::btree::navigate::LazyLeafRange::<BorrowType, K, V>::none;false;false;false;false
alloc::exchange_malloc;true;true;false;false
<collections::btree::set_val::SetValZST as core::cmp::PartialOrd>::partial_cmp;false;false;false;false
boxed::iter::<impl core::async_iter::AsyncIterator for boxed::Box<S>>::size_hint;false;true;false;false
raw_vec::capacity_overflow;false;false;false;false
collections::btree::map::BTreeMap::<K, V, A>::extract_if_inner;false;false;true;false
collections::linked_list::CursorMut::<'a, T, A>::as_cursor;false;false;true;false
<bstr::ByteString as core::cmp::PartialOrd>::partial_cmp;false;false;true;false
ffi::c_str::NulError::into_vec;false;false;true;false
rc::Rc::<T, A>::new_uninit_in;false;true;false;false
collections::binary_heap::BinaryHeap::<T, A>::with_capacity_in;false;false;false;false
str::<impl str>::to_lowercase::map_uppercase_sigma;false;false;false;false
string::<impl core::cmp::PartialEq<borrow::Cow<'a, str>> for str>::ne;false;false;true;false
collections::btree::set::BTreeSet::<T, A>::lower_bound;false;false;true;false
collections::btree::navigate::<impl collections::btree::node::Handle<collections::btree::node::NodeRef<BorrowType, K, V, collections::btree::node::marker::Leaf>, collections::btree::node::marker::Edge>>::next_kv;false;false;true;true
collections::btree::map::Cursor::<'a, K, V>::peek_next;false;false;true;false
boxed::thin::WithHeader::<H>::value;false;false;true;false
collections::binary_heap::BinaryHeap::<T, A>::peek;false;false;true;false
sync::Arc::<T, A>::inner;false;true;true;false
<sync::Arc<T, A> as core::convert::AsRef<T>>::as_ref;false;false;true;false
<collections::vec_deque::VecDeque<T> as collections::vec_deque::spec_from_iter::SpecFromIter<T, collections::vec_deque::into_iter::IntoIter<T>>>::spec_from_iter;false;false;true;false
sync::Arc::<T, A>::get_mut_unchecked;true;true;true;false
collections::linked_list::LinkedList::<T>::new;false;false;false;false
raw_vec::RawVec::<T, A>::with_capacity_in;false;false;false;false
<(C, D, E, F, G, H) as vec::is_zero::IsZero>::is_zero;false;false;false;false
<boxed::Box<T, A> as core::hash::Hasher>::write_u16;false;true;true;false
boxed::iter::<impl core::async_iter::AsyncIterator for boxed::Box<S>>::poll_next;false;true;true;false
vec::partial_eq::<impl core::cmp::PartialEq<vec::Vec<U, A>> for &mut [T]>::ne;false;false;true;false
<ffi::c_str::IntoStringError as core::cmp::Eq>::assert_receiver_is_total_eq;false;false;true;false
collections::btree::merge_iter::Peeked::B;false;false;false;false
"boxed::convert::<impl core::convert::From<[T; N]> for boxed::Box<[T]>>::from";false;false;false;false
collections::btree::navigate::LazyLeafRange::<collections::btree::node::marker::Immut<'a>, K, V>::next_back_unchecked;true;true;true;false
borrow::Cow::<'_, B>::to_mut;false;false;true;false
collections::btree::node::NodeRef::<collections::btree::node::marker::Mut<'a>, K, V, collections::btree::node::marker::Leaf>::push;false;true;true;false
collections::btree::map::BTreeMap::<K, V, A>::into_keys;false;false;true;false
slice::<impl [T]>::sort_by;false;false;true;false
string::String::into_boxed_str;false;true;true;false
<sync::Arc<T, A> as core::cmp::PartialOrd>::le;false;false;true;false
rc::RcInnerPtr::strong;false;false;false;false
raw_vec::RawVec::<T, A>::reserve;false;false;true;false
string::String::into_raw_parts;false;false;true;false
raw_vec::RawVecInner::<A>::try_reserve_exact;false;true;true;false
bstr::ByteString::as_bytes;false;false;true;false
alloc::handle_alloc_error::rt_error;false;true;false;false
collections::btree::node::Handle::<Node, Type>::idx;false;false;true;false
collections::btree::set::BTreeSet::<T, A>::clear;false;false;true;false
collections::btree::map::CursorMutKey::<'a, K, V, A>::as_cursor;false;true;true;false
collections::vec_deque::VecDeque::<T, A>::front_mut;false;false;true;false
collections::TryReserveError::kind;false;false;false;false
collections::vec_deque::VecDeque::<T, A>::push_front;false;true;true;false
<sync::Arc<T, A> as core::hash::Hash>::hash;false;false;true;false
<vec::into_iter::IntoIter<T, A> as core::clone::Clone>::clone;false;false;true;false
<boxed::Box<T, A> as core::hash::Hasher>::write_i16;false;true;true;false
<collections::btree::map::CursorMutKey<'_, K, V, A> as core::fmt::Debug>::fmt;false;false;true;false
<string::IntoChars as core::clone::Clone>::clone;false;false;true;false
raw_vec::RawVec::<T, A>::reserve_exact;false;false;true;false
boxed::convert::<impl boxed::Box<(dyn core::any::Any + core::marker::Send + 'static), A>>::downcast;false;true;false;false
boxed::Box::<T>::from_raw;true;true;true;false
ffi::c_str::<impl core::clone::Clone for boxed::Box<core::ffi::CStr>>::clone;false;true;false;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<collections::btree::node::marker::Mut<'a>, K, V, NodeType>, collections::btree::node::marker::KV>::key_mut;false;true;true;false
<collections::binary_heap::IntoIter<T, A> as core::fmt::Debug>::fmt;false;false;true;false
rc::Weak::<T, A>::allocator;false;false;true;false
<vec::Vec<T, A> as core::ops::Index<I>>::index;false;false;true;false
<string::String::retain::SetLenOnDrop<'a> as core::ops::Drop>::drop;false;true;true;false
"vec::<impl core::convert::TryFrom<vec::Vec<T, A>> for [T; N]>::try_from";false;true;true;false
rc::Rc::<T>::from_inner;true;true;true;false
<ffi::c_str::FromVecWithNulError as core::fmt::Display>::fmt;false;false;true;false
<&'a vec::Vec<T, A> as core::iter::IntoIterator>::into_iter;false;false;true;false
rc::Rc::<T, A>::ptr_eq;false;false;true;false
<collections::btree::map::Iter<'a, K, V> as core::iter::DoubleEndedIterator>::next_back;false;true;true;false
boxed::Box::<T>::try_new;false;false;false;false
collections::btree::map::BTreeMap::<K, V, A>::iter;false;false;true;false
collections::btree::set::BTreeSet::<T, A>::get;false;false;true;false
<collections::btree::set::Union<'a, T> as core::iter::Iterator>::min;false;false;true;false
<collections::linked_list::Cursor<'_, T, A> as core::fmt::Debug>::fmt;false;false;true;false
collections::btree::borrow::DormantMutRef::<'a, T>::reborrow;true;true;true;false
<vec::in_place_drop::InPlaceDstDataSrcBufDrop<Src, Dest> as core::ops::Drop>::drop;false;true;true;false
collections::vec_deque::VecDeque::<T, A>::shrink_to;false;true;true;false
raw_vec::RawVecInner::<A>::shrink;false;true;true;false
<collections::btree::set::BTreeSet<T, A> as core::cmp::Ord>::cmp;false;false;true;false
<string::String as core::cmp::PartialEq<borrow::Cow<'a, str>>>::eq;false;false;true;false
<collections::btree::map::Range<'a, K, V> as core::iter::Iterator>::last;false;false;true;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<collections::btree::node::marker::Mut<'a>, K, V, collections::btree::node::marker::Internal>, collections::btree::node::marker::Edge>::insert;false;true;true;false
<collections::binary_heap::IntoIter<T, A> as core::clone::Clone>::clone;false;false;true;false
<string::String as core::convert::From<&mut str>>::from;false;false;true;false
collections::btree::map::BTreeMap::<K, V, A>::upper_bound;false;false;true;false
<collections::binary_heap::Iter<'a, T> as core::iter::DoubleEndedIterator>::next_back;false;false;true;false
collections::btree::node::LeftOrRight::Right;false;false;false;false
<vec::splice::Splice<'a, I, A> as core::fmt::Debug>::fmt;false;false;true;false
<vec::into_iter::IntoIter<T, A> as core::ops::Drop>::drop::DropGuard;false;false;true;false
collections::btree::set::BTreeSet::<T, A>::extract_if;false;false;true;false
collections::btree::map::entry::Entry::Occupied;false;false;true;false
collections::binary_heap::Hole::<'a, T>::move_to;true;true;true;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<BorrowType, K, V, NodeType>, HandleType>::reborrow;false;false;true;false
collections::binary_heap::BinaryHeap::<T, A>::new_in;false;false;false;false
collections::btree::node::BalancingContext::<'a, K, V>::bulk_steal_right;false;true;true;false
<rc::Rc<B> as core::convert::From<borrow::Cow<'a, B>>>::from;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::resize;false;false;true;false
<string::Drain<'_> as core::iter::Iterator>::next;false;false;true;false
collections::btree::dedup_sorted_iter::DedupSortedIter::<K, V, I>::new;false;false;false;false
<string::String as core::convert::AsRef<str>>::as_ref;false;false;true;false
collections::btree::node::BalancingContext::<'a, K, V>::right_child_len;false;false;true;false
<&'a collections::btree::map::BTreeMap<K, V, A> as core::iter::IntoIterator>::into_iter;false;false;true;false
collections::btree::map::BTreeMap::<K, collections::btree::set_val::SetValZST, A>::replace;false;false;true;false
boxed::convert::<impl core::convert::From<E> for boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync + 'a)>>::from;false;false;false;false
collections::btree::navigate::LazyLeafHandle::Edge;false;false;true;false
<collections::vec_deque::iter_mut::IterMut<'a, T> as core::iter::Iterator>::try_fold;false;false;true;true
ffi::c_str::FromVecWithNulError::as_bytes;false;false;true;false
collections::btree::map::CursorMutKey::<'a, K, V, A>::insert_after_unchecked;true;true;true;false
collections::vec_deque::VecDeque::<T, A>::resize_with;false;false;true;false
string::String::shrink_to;false;false;true;false
<collections::TryReserveError as core::clone::Clone>::clone;false;false;false;false
<string::String as core::iter::Extend<&'a str>>::extend_one;false;false;true;false
<rc::Rc<T, A> as core::cmp::PartialOrd>::le;false;false;true;false
rc::Rc::<T, A>::from_ptr_in;true;true;true;false
rc::Rc::<T, A>::new_in;false;false;false;false
rc::Rc::<T, A>::get_mut_unchecked;true;true;true;false
collections::btree::navigate::full_range;false;false;true;false
<collections::binary_heap::BinaryHeap<T, A> as core::convert::From<vec::Vec<T, A>>>::from;false;false;true;false
<f64 as vec::is_zero::IsZero>::is_zero;false;false;true;false
<bstr::ByteString as core::borrow::Borrow<[u8]>>::borrow;false;false;true;false
<collections::linked_list::IterMut<'a, T> as core::iter::Iterator>::size_hint;false;false;true;false
rc::Rc::<T, A>::into_inner;false;false;true;false
collections::btree::set::BTreeSet::<T, A>::get_or_insert;false;false;true;false
ffi::c_str::<impl core::convert::From<&mut core::ffi::CStr> for sync::Arc<core::ffi::CStr>>::from;false;false;true;false
<string::String as core::fmt::Debug>::fmt;false;false;true;false
boxed::Box::<T, A>::into_non_null_with_allocator;false;true;false;false
<ffi::c_str::CString as core::cmp::Eq>::assert_receiver_is_total_eq;false;false;false;false
string::String::into_bytes;false;false;true;false
vec::drain::Drain::<'a, T, A>::allocator;false;true;true;false
<i16 as vec::is_zero::IsZero>::is_zero;false;false;false;false
<ffi::c_str::FromBytesWithNulErrorKind as core::cmp::Eq>::assert_receiver_is_total_eq;false;false;false;false
vec::partial_eq::<impl core::cmp::PartialEq<vec::Vec<U, A>> for [T]>::ne;false;false;true;false
"<vec::Vec<T> as core::convert::From<[T; N]>>::from";false;false;false;false
collections::btree::fix::<impl collections::btree::node::NodeRef<collections::btree::node::marker::Owned, K, V, collections::btree::node::marker::LeafOrInternal>>::fix_right_border_of_plentiful;false;false;true;true
<vec::drain::Drain<'_, T, A> as core::ops::Drop>::drop::DropGuard;false;false;true;false
<collections::vec_deque::VecDeque<T> as core::iter::FromIterator<T>>::from_iter;false;false;false;false
task::raw_waker::wake_by_ref;true;true;true;false
collections::btree::set::Cursor::<'a, K>::peek_next;false;false;true;false
<collections::vec_deque::VecDeque<T, A> as core::ops::Drop>::drop;false;true;true;false
sync::Arc::<T, A>::allocate_for_ptr_in;true;true;true;false
<collections::btree::set::Range<'a, T> as core::iter::DoubleEndedIterator>::next_back;false;false;true;false
collections::btree::map::BTreeMap::<K, V, A>::bulk_build_from_sorted_iter;false;false;false;false
boxed::convert::<impl core::convert::From<T> for boxed::Box<T>>::from;false;false;false;false
rc::Rc::<[T]>::new_zeroed_slice;false;true;false;false
<collections::binary_heap::BinaryHeap<T, A> as core::iter::Extend<&'a T>>::extend_one;false;false;true;false
<core::option::Option<core::num::NonZero<usize>> as vec::is_zero::IsZero>::is_zero;false;false;true;false
sync::Weak::<T, A>::weak_count;false;false;true;false
rc::Rc::<T>::try_new_uninit;false;true;false;false
<string::FromUtf8Error as core::cmp::Eq>::assert_receiver_is_total_eq;false;false;true;false
vec::Vec::<T, A>::into_raw_parts_with_alloc;false;true;true;false
rc::Weak::<T, A>::strong_count;false;false;true;false
<boxed::thin::ThinBox<T> as core::ops::Deref>::deref;false;true;true;false
<collections::vec_deque::iter::Iter<'a, T> as core::iter::Iterator>::size_hint;false;false;true;false
collections::linked_list::CursorMut::<'a, T, A>::push_back;false;false;true;false
<collections::vec_deque::into_iter::IntoIter<T, A> as core::iter::ExactSizeIterator>::is_empty;false;false;true;false
boxed::Box;false;false;true;false
<collections::btree::map::IntoKeys<K, V, A> as core::iter::Iterator>::min;false;false;true;false
collections::btree::node::NodeRef::<collections::btree::node::marker::Owned, K, V, collections::btree::node::marker::LeafOrInternal>::new;false;false;false;false
sync::Arc::<T, A>::weak_count;false;false;true;false
sync::Arc::<T>::from_ptr;true;true;true;false
<collections::btree::set::SymmetricDifference<'_, T> as core::clone::Clone>::clone;false;false;true;false
<collections::btree::set::Union<'a, T> as core::iter::Iterator>::size_hint;false;false;true;false
<collections::vec_deque::into_iter::IntoIter<T, A> as core::iter::Iterator>::count;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::with_capacity_in;false;false;false;false
bstr::<impl core::cmp::PartialEq<&'a core::bstr::ByteStr> for borrow::Cow<'a, str>>::eq;false;false;true;false
collections::btree::map::entry::VacantEntry::<'a, K, V, A>::insert;false;false;true;false
<sync::Arc<T, A> as core::cmp::Ord>::cmp;false;false;true;false
collections::btree::navigate::<impl collections::btree::node::Handle<collections::btree::node::NodeRef<collections::btree::node::marker::ValMut<'a>, K, V, collections::btree::node::marker::Leaf>, collections::btree::node::marker::Edge>>::next_unchecked;true;false;true;false
alloc::__alloc_error_handler::__rdl_oom;true;true;false;false
<boxed::Box<T, A> as core::cmp::PartialEq>::eq;false;true;false;false
collections::btree::map::BTreeMap::<K, V, A>::remove_entry;false;false;true;false
<boxed::Box<T, A> as core::fmt::Display>::fmt;false;true;true;false
<collections::binary_heap::IntoIterSorted<T, A> as core::clone::Clone>::clone;false;false;true;false
collections::btree::map::BTreeMap::<K, V, A>::append;false;false;true;false
<borrow::Cow<'a, str> as core::ops::Add>::add;false;false;true;false
<bstr::ByteString as core::ops::Index<core::ops::Range<usize>>>::index;false;false;true;false
collections::btree::map::CursorMutKey::<'a, K, V, A>::remove_prev;false;true;true;false
<collections::btree::set::Iter<'a, T> as core::iter::Iterator>::next;false;false;true;false
boxed::Box::<T, A>::allocator;false;false;false;false
<collections::btree::map::Iter<'a, K, V> as core::iter::Iterator>::min;false;false;true;false
<bstr::ByteString as core::ops::IndexMut<core::ops::RangeTo<usize>>>::index_mut;false;false;true;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<collections::btree::node::marker::Mut<'a>, K, V, NodeType>, HandleType>::dormant;false;false;true;false
collections::btree::set::BTreeSet::<T, A>::retain;false;false;true;true
<collections::vec_deque::iter_mut::IterMut<'a, T> as core::iter::DoubleEndedIterator>::advance_back_by;false;false;true;false
<core::option::Option<core::num::NonZero<i64>> as vec::is_zero::IsZero>::is_zero;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::wrap_add;false;false;true;false
<collections::vec_deque::iter::Iter<'a, T> as core::iter::DoubleEndedIterator>::advance_back_by;false;false;true;false
collections::btree::navigate::<impl collections::btree::node::NodeRef<collections::btree::node::marker::ValMut<'a>, K, V, collections::btree::node::marker::LeafOrInternal>>::full_range;false;true;true;false
<&'b string::String as core::str::pattern::Pattern>::is_contained_in;false;false;true;false
ffi::c_str::CString::from_vec_with_nul_unchecked;true;true;true;false
string::String::insert_str;false;true;true;false
boxed::convert::<impl core::convert::From<string::String> for boxed::Box<(dyn core::error::Error + 'a)>>::from;false;false;true;false
collections::btree::node::marker::ValMut;false;false;true;false
vec::Vec::<T, A>::as_non_null;false;true;true;false
<f32 as vec::is_zero::IsZero>::is_zero;false;false;true;false
<collections::linked_list::LinkedList<T, A> as core::iter::Extend<&'a T>>::extend;false;false;true;false
<collections::vec_deque::iter_mut::IterMut<'a, T> as core::iter::Iterator>::next;false;false;true;false
collections::btree::set::BTreeSet::<T, A>::is_superset;false;false;true;false
vec::in_place_drop::InPlaceDrop::<T>::len;false;true;true;false
<collections::binary_heap::RebuildOnDrop<'_, T, A> as core::ops::Drop>::drop;false;false;true;false
<string::String as core::ops::AddAssign<&str>>::add_assign;false;false;true;false
<collections::linked_list::Iter<'_, T> as core::fmt::Debug>::fmt;false;false;true;false
collections::btree::set::Cursor::<'a, K>::prev;false;false;true;false
<rc::Rc<T, A> as rc::RcEqIdent<T, A>>::eq;false;false;true;false
rc::Rc::<T, A>::increment_strong_count_in;true;true;true;false
sync::Arc::<T>::allocate_for_layout;true;true;false;false
<collections::btree::set::ExtractIf<'_, T, F, A> as core::iter::Iterator>::size_hint;false;false;true;false
"<collections::vec_deque::VecDeque<T, A> as core::cmp::PartialEq<[U; N]>>::eq";false;false;true;false
collections::btree::fix::<impl collections::btree::node::NodeRef<collections::btree::node::marker::Owned, K, V, collections::btree::node::marker::LeafOrInternal>>::fix_left_border;false;false;true;false
<rc::UniqueRc<T, A> as core::cmp::PartialOrd>::gt;false;false;true;false
collections::btree::set::entry::OccupiedEntry::<'a, T, A>::remove;false;false;true;false
collections::linked_list::LinkedList::<T, A>::detach_all_nodes;false;true;true;false
<ffi::c_str::FromVecWithNulError as core::clone::Clone>::clone;false;false;true;false
collections::linked_list::LinkedList::<T, A>::iter;false;false;true;false
<collections::linked_list::ExtractIf<'_, T, F> as core::fmt::Debug>::fmt;false;false;true;false
<sync::Arc<T, A> as core::fmt::Pointer>::fmt;false;false;true;false
vec::Vec::<T, A>::remove;false;true;true;false
<boxed::Box<T, A> as core::borrow::Borrow<T>>::borrow;false;true;false;false
boxed::Box::<T, A>::try_new_uninit_in;false;true;false;false
string::<impl core::cmp::PartialEq<str> for borrow::Cow<'a, str>>::eq;false;false;true;false
<collections::btree::map::Iter<'a, K, V> as core::default::Default>::default;false;false;false;false
<collections::btree::set::Iter<'_, T> as core::default::Default>::default;false;false;false;false
<collections::TryReserveError as core::fmt::Display>::fmt;false;false;true;false
<core::ascii::Char as string::SpecToString>::spec_to_string;false;false;false;false
<collections::vec_deque::iter_mut::IterMut<'_, T> as core::iter::ExactSizeIterator>::is_empty;false;false;true;false
rc::Rc::<T>::new_cyclic;false;false;false;false
<i8 as string::SpecToString>::spec_to_string;false;false;false;false
bstr::<impl core::cmp::PartialEq<&'a core::bstr::ByteStr> for borrow::Cow<'a, core::bstr::ByteStr>>::eq;false;false;true;false
<collections::btree::navigate::LeafRange<collections::btree::node::marker::Immut<'a>, K, V> as core::clone::Clone>::clone;false;false;true;false
<&'a collections::vec_deque::VecDeque<T, A> as core::iter::IntoIterator>::into_iter;false;false;true;false
<core::option::Option<core::num::NonZero<u64>> as vec::is_zero::IsZero>::is_zero;false;false;true;false
<collections::btree::map::Range<'_, K, V> as core::default::Default>::default;false;false;false;false
vec::Vec::<T, A>::from_parts_in;true;true;true;false
bstr::<impl core::cmp::PartialOrd<borrow::Cow<'a, str>> for &'a core::bstr::ByteStr>::partial_cmp;false;false;true;false
collections::binary_heap::BinaryHeap::<T, A>::len;false;false;true;false
collections::btree::navigate::<impl collections::btree::node::Handle<collections::btree::node::NodeRef<collections::btree::node::marker::Dying, K, V, collections::btree::node::marker::Leaf>, collections::btree::node::marker::Edge>>::deallocating_next_back_unchecked;true;false;true;false
collections::binary_heap::DrainSorted::<'a, T, A>::allocator;false;false;true;false
ffi::c_str::<impl core::convert::TryFrom<ffi::c_str::CString> for string::String>::try_from;false;false;false;false
<rc::UniqueRc<T, A> as core::fmt::Pointer>::fmt;false;false;true;false
vec::partial_eq::<impl core::cmp::PartialEq<[U]> for vec::Vec<T, A>>::eq;false;false;true;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<collections::btree::node::marker::Mut<'a>, K, V, collections::btree::node::marker::Internal>, collections::btree::node::marker::KV>::split;false;true;true;false
collections::vec_deque::VecDeque::<T, A>::pop_front_if;false;false;true;false
<vec::Vec<T, A> as core::convert::AsMut<[T]>>::as_mut;false;false;true;false
bstr::<impl core::cmp::PartialEq<bstr::ByteString> for &[u8]>::eq;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::retain;false;false;true;false
string::String::len;false;false;true;false
<collections::btree::map::Values<'a, K, V> as core::iter::Iterator>::size_hint;false;false;true;false
slice::<impl core::slice::sort::stable::BufGuard<T> for vec::Vec<T>>::with_capacity;false;false;false;false
<rc::Rc<str> as core::default::Default>::default;false;true;false;false
vec::Vec::<T, A>::try_reserve;false;false;true;false
sync::Arc::<T>::new_cyclic;false;false;false;false
<() as vec::spec_from_elem::SpecFromElem>::from_elem;false;true;false;false
<ffi::c_str::CString as core::convert::From<vec::Vec<core::num::NonZero<u8>>>>::from;false;true;true;false
collections::btree::navigate::LazyLeafRange::<collections::btree::node::marker::Dying, K, V>::deallocating_next_back_unchecked;true;true;true;false
<collections::btree::map::CursorMut<'_, K, V, A> as core::fmt::Debug>::fmt;false;false;true;false
collections::btree::node::BalancingContext::<'a, K, V>::left_child_len;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::is_empty;false;false;true;false
raw_vec::RawVec::<T, A>::try_with_capacity_in;false;false;false;false
rc::Rc::<[T]>::from_iter_exact;true;true;false;true
boxed::Box::<T, A>::into_pin;false;true;false;false
raw_vec::RawVec::<T, A>::shrink_to_fit;false;false;true;false
<sync::Arc<T> as core::default::Default>::default;false;true;false;false
collections::btree::node::slice_insert;true;true;true;false
alloc::handle_alloc_error;false;false;false;false
<sync::Weak<T, A> as core::ops::Drop>::drop;false;true;true;false
<sync::Arc<T, A> as core::cmp::PartialOrd>::partial_cmp;false;false;true;false
<boxed::Box<F, A> as core::ops::AsyncFnOnce<Args>>::async_call_once;false;true;false;false
collections::btree::navigate::<impl collections::btree::node::Handle<collections::btree::node::NodeRef<collections::btree::node::marker::Dying, K, V, collections::btree::node::marker::Leaf>, collections::btree::node::marker::Edge>>::deallocating_next_unchecked;true;false;true;false
rc::Weak::<T, A>::as_ptr;false;true;true;false
<&str as string::SpecToString>::spec_to_string;false;false;false;false
string::String::new;false;false;false;false
<string::String as core::iter::Extend<string::String>>::extend;false;false;true;true
collections::vec_deque::VecDeque::<T, A>::range;false;true;true;false
collections::btree::node::NodeRef::<collections::btree::node::marker::Dying, K, V, collections::btree::node::marker::LeafOrInternal>::deallocate_and_ascend;true;true;true;false
collections::btree::map::BTreeMap::<K, V, A>::values;false;false;true;false
boxed::convert::<impl core::convert::From<string::String> for boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync + 'a)>>::from::StringError;false;false;true;false
<collections::binary_heap::IntoIterSorted<T, A> as core::iter::Iterator>::size_hint;false;false;true;false
<borrow::Cow<'a, str> as core::ops::AddAssign<&'a str>>::add_assign;false;false;true;false
<collections::btree::map::IntoValues<K, V, A> as core::fmt::Debug>::fmt;false;false;true;false
ffi::c_str::<impl core::convert::From<ffi::c_str::CString> for borrow::Cow<'a, core::ffi::CStr>>::from;false;false;false;false
<collections::vec_deque::iter::Iter<'_, T> as core::iter::ExactSizeIterator>::len;false;false;true;false
string::String::split_off;false;true;true;false
<bstr::ByteString as core::cmp::PartialOrd<borrow::Cow<'_, str>>>::partial_cmp;false;false;true;false
collections::binary_heap::BinaryHeap::<T, A>::capacity;false;false;true;false
collections::btree::map::BTreeMap::<K, V, A>::try_insert;false;false;true;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<BorrowType, K, V, collections::btree::node::marker::Internal>, collections::btree::node::marker::Edge>::descend;false;true;true;false
collections::linked_list::LinkedList::<T, A>::push_back_node;true;true;true;false
<string::String as core::cmp::PartialEq>::eq;false;false;true;false
boxed::thin::ThinBox::<T>::data;false;false;true;false
<collections::btree::map::Keys<'a, K, V> as core::iter::Iterator>::size_hint;false;false;true;false
<rc::Rc<T, A> as core::cmp::PartialOrd>::partial_cmp;false;false;true;false
collections::linked_list::Cursor::<'a, T, A>::as_list;false;false;true;false
collections::btree::navigate::<impl collections::btree::node::Handle<collections::btree::node::NodeRef<collections::btree::node::marker::Immut<'a>, K, V, collections::btree::node::marker::Leaf>, collections::btree::node::marker::Edge>>::next_unchecked;true;false;true;false
<collections::vec_deque::VecDeque<T, A> as core::cmp::PartialEq>::eq;false;false;true;false
<collections::btree::set::Iter<'a, T> as core::iter::Iterator>::max;false;false;true;false
<collections::btree::navigate::LazyLeafRange<B, K, V> as core::default::Default>::default;false;false;false;false
collections::btree::map::IntoIter::<K, V, A>::dying_next_back;false;true;true;false
collections::linked_list::LinkedList::<T, A>::cursor_back;false;false;true;false
<collections::linked_list::LinkedList<T, A> as core::ops::Drop>::drop;false;false;true;true
<collections::vec_deque::into_iter::IntoIter<T, A> as core::clone::Clone>::clone;false;false;true;false
<ffi::c_str::CString as core::ops::Drop>::drop;false;true;true;false
<rc::UniqueRc<T, A> as core::cmp::PartialEq>::eq;false;false;true;false
<rc::UniqueRc<T, A> as core::cmp::PartialOrd>::lt;false;false;true;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<collections::btree::node::marker::Mut<'a>, K, V, NodeType>, collections::btree::node::marker::KV>::into_val_mut;false;true;true;false
<rc::Rc<T, A> as core::cmp::PartialOrd>::lt;false;false;true;false
rc::UniqueRc::<T, A>::into_rc;false;true;true;false
str::replace_ascii;true;true;false;true
<string::Drain<'_> as core::iter::DoubleEndedIterator>::next_back;false;false;true;false
vec::partial_eq::<impl core::cmp::PartialEq<vec::Vec<U, A>> for borrow::Cow<'_, [T]>>::ne;false;false;true;false
<ffi::c_str::CString as core::hash::Hash>::hash;false;false;true;false
collections::btree::navigate::<impl collections::btree::node::Handle<collections::btree::node::NodeRef<collections::btree::node::marker::Dying, K, V, collections::btree::node::marker::Leaf>, collections::btree::node::marker::Edge>>::deallocating_next_back;true;true;true;true
bstr::<impl core::convert::From<&'a core::bstr::ByteStr> for borrow::Cow<'a, core::bstr::ByteStr>>::from;false;false;false;false
sync::Arc::<T>::new_zeroed;false;true;false;false
<string::Drain<'a> as core::convert::AsRef<[u8]>>::as_ref;false;false;true;false
<collections::btree::set_val::SetValZST as collections::btree::set_val::IsSetVal>::is_set_val;false;false;false;false
<collections::btree::map::IntoKeys<K, V, A> as core::iter::ExactSizeIterator>::len;false;false;true;false
<rc::Rc<[u8]> as core::convert::From<rc::Rc<str>>>::from;false;true;true;false
rc::data_offset_align;false;false;false;false
<string::Drain<'_> as core::fmt::Debug>::fmt;false;false;true;false
<collections::btree::map::Cursor<'_, K, V> as core::fmt::Debug>::fmt;false;false;true;false
<collections::btree::map::IntoIter<K, V, A> as core::iter::Iterator>::next;false;false;true;false
collections::btree::split::<impl collections::btree::node::NodeRef<collections::btree::node::marker::Owned, K, V, collections::btree::node::marker::LeafOrInternal>>::new_pillar;false;false;false;true
<bstr::ByteString as core::ops::Index<core::ops::RangeInclusive<usize>>>::index;false;false;true;false
string::FromUtf8Error::as_bytes;false;false;true;false
sync::Arc::<[T]>::allocate_for_slice;true;true;false;false
collections::btree::node::NodeRef::<collections::btree::node::marker::Owned, K, V, Type>::borrow_valmut;false;false;true;false
vec::Vec::<T>::new;false;false;false;false
<collections::btree::map::RangeMut<'a, K, V> as core::iter::Iterator>::next;false;false;true;false
<collections::btree::set::entry::Entry<'_, T, A> as core::fmt::Debug>::fmt;false;false;true;false
<rc::Rc<T, A> as core::fmt::Pointer>::fmt;false;false;true;false
<ffi::c_str::CString as core::convert::AsRef<core::ffi::CStr>>::as_ref;false;false;false;false
<collections::btree::map::ValuesMut<'a, K, V> as core::iter::Iterator>::last;false;false;true;false
string::String::capacity;false;false;true;false
<vec::into_iter::IntoIter<T, A> as core::iter::Iterator>::count;false;false;true;false
<collections::btree::map::entry::Entry<'_, K, V, A> as core::fmt::Debug>::fmt;false;false;true;false
ffi::c_str::<impl core::convert::From<ffi::c_str::CString> for rc::Rc<core::ffi::CStr>>::from;false;true;false;false
<ffi::c_str::CString as core::borrow::Borrow<core::ffi::CStr>>::borrow;false;false;false;false
raw_vec::RawVec::<T>::with_capacity;false;false;false;false
<bstr::ByteString as core::convert::AsRef<[u8]>>::as_ref;false;false;true;false
collections::btree::map::BTreeMap::<K, V>::new;false;false;false;false
<sync::Arc<T, A> as core::fmt::Debug>::fmt;false;false;true;false
collections::linked_list::LinkedList::<T, A>::iter_mut;false;false;true;false
collections::btree::fix::<impl collections::btree::node::Handle<collections::btree::node::NodeRef<collections::btree::node::marker::Mut<'a>, K, V, collections::btree::node::marker::Internal>, collections::btree::node::marker::KV>>::fix_left_child;false;false;true;false
<collections::btree::map::ValuesMut<'a, K, V> as core::iter::Iterator>::next;false;false;true;false
<string::String as core::iter::FromIterator<string::String>>::from_iter;false;false;false;false
collections::btree::map::entry::OccupiedEntry::<'a, K, V, A>::insert;false;false;true;false
collections::btree::map::entry::OccupiedEntry::<'a, K, V, A>::get_mut;false;false;true;false
vec::Vec::<T, A>::resize_with;false;false;true;false
<vec::Vec<T> as core::convert::From<&[T]>>::from;false;false;false;false
<collections::vec_deque::into_iter::IntoIter<T, A> as core::fmt::Debug>::fmt;false;false;true;false
ffi::c_str::<impl core::convert::From<borrow::Cow<'_, core::ffi::CStr>> for boxed::Box<core::ffi::CStr>>::from;false;false;true;false
rc::Rc::<T, A>::from_raw_in;true;true;true;false
bstr::<impl core::cmp::PartialOrd<&'a core::bstr::ByteStr> for borrow::Cow<'a, str>>::partial_cmp;false;false;true;false
collections::binary_heap::Hole::<'a, T>::get;true;true;true;false
<collections::btree::set::IntoIter<T, A> as core::iter::Iterator>::size_hint;false;false;true;false
<collections::btree::set::Intersection<'a, T, A> as core::iter::Iterator>::size_hint;false;false;true;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<BorrowType, K, V, NodeType>, collections::btree::node::marker::Edge>::new_edge;true;false;true;false
<sync::Arc<T> as core::error::Error>::source;false;false;true;false
<collections::btree::map::Iter<'a, K, V> as core::iter::Iterator>::size_hint;false;false;true;false
collections::linked_list::CursorMut::<'a, T>::splice_after;false;true;true;false
<u8 as string::SpecToString>::spec_to_string;false;false;false;false
<rc::Rc<T, A> as rc::RcEqIdent<T, A>>::ne;false;false;true;false
boxed::Box::<[T]>::new_uninit_slice;false;true;false;false
bstr::<impl core::cmp::PartialOrd<bstr::ByteString> for borrow::Cow<'_, [u8]>>::partial_cmp;false;false;true;false
collections::btree::node::NodeRef::<collections::btree::node::marker::Mut<'a>, K, V, Type>::into_leaf_mut;false;true;true;false
<&'b string::String as core::str::pattern::Pattern>::strip_suffix_of;false;false;true;false
sync::Arc::<T, A>::make_mut;false;true;true;false
ffi::c_str::CString::from_raw;true;true;true;false
<collections::vec_deque::VecDeque<T, A> as core::cmp::PartialEq<&[U]>>::eq;false;false;true;false
vec::partial_eq::<impl core::cmp::PartialEq<&[U]> for vec::Vec<T, A>>::eq;false;false;true;false
task::<impl core::convert::From<sync::Arc<W>> for core::task::RawWaker>::from;false;false;true;false
<collections::vec_deque::VecDeque<T, A> as core::cmp::Ord>::cmp;false;false;true;false
<vec::Vec<T, A> as core::convert::From<boxed::Box<[T], A>>>::from;false;false;false;false
vec::into_iter::IntoIter::<T, A>::as_mut_slice;false;true;true;false
<&collections::btree::set::BTreeSet<T, A> as core::ops::Sub<&collections::btree::set::BTreeSet<T, A>>>::sub;false;false;true;false
string::<impl core::convert::From<string::String> for vec::Vec<u8>>::from;false;false;true;false
<alloc::Global as core::alloc::Allocator>::deallocate;true;true;true;false
raw_vec::RawVecInner::<A>::try_reserve;false;true;true;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<collections::btree::node::marker::Mut<'a>, K, V, NodeType>, collections::btree::node::marker::KV>::into_kv_mut;false;true;true;false
str::<impl slice::Join<&str> for [S]>::join;false;true;false;false
<collections::btree::map::IterMut<'_, K, V> as core::iter::ExactSizeIterator>::len;false;false;true;false
<bstr::ByteString as core::iter::FromIterator<&'a [u8]>>::from_iter;false;false;false;true
collections::btree::map::entry::Entry::<'a, K, V, A>::insert_entry;false;false;true;false
collections::binary_heap::IntoIterSorted::<T, A>::allocator;false;false;true;false
<boxed::Box<T, A> as core::hash::Hasher>::finish;false;true;false;false
<collections::btree::map::Keys<'_, K, V> as core::default::Default>::default;false;false;false;false
<&&&&str as string::SpecToString>::spec_to_string;false;false;false;false
ffi::c_str::<impl core::convert::From<&core::ffi::CStr> for boxed::Box<core::ffi::CStr>>::from;false;true;false;false
collections::btree::map::CursorMut::<'a, K, V, A>::insert_before;false;false;true;false
collections::binary_heap::Drain::<'_, T, A>::allocator;false;false;true;false
vec::Vec::<T, A>::try_reserve_exact;false;false;true;false
<vec::Vec<T, A> as vec::ExtendFromWithinSpec>::spec_extend_from_within;true;true;true;false
<sync::Arc<T, A> as core::ops::Drop>::drop;false;true;true;false
<collections::btree::map::IterMut<'a, K, V> as core::iter::Iterator>::size_hint;false;false;true;false
collections::btree::search::<impl collections::btree::node::NodeRef<BorrowType, K, V, collections::btree::node::marker::LeafOrInternal>>::find_upper_bound_edge;false;true;true;false
<collections::vec_deque::into_iter::IntoIter<T, A> as core::iter::Iterator>::next;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::swap_remove_back;false;false;true;false
raw_vec::RawVec::<T, A>::from_nonnull_in;true;true;true;false
<collections::linked_list::IntoIter<T, A> as core::clone::Clone>::clone;false;false;true;false
vec::Vec::<T, A>::split_off;false;true;true;false
boxed::Box::<T, A>::from_raw_in;true;true;true;false
ffi::c_str::<impl core::convert::From<&mut core::ffi::CStr> for boxed::Box<core::ffi::CStr>>::from;false;false;true;false
<vec::into_iter::IntoIter<T, A> as core::iter::Iterator>::next_chunk;false;true;true;false
<core::option::Option<core::num::NonZero<u128>> as vec::is_zero::IsZero>::is_zero;false;false;true;false
collections::btree::set::BTreeSet::<T, A>::from_sorted_iter;false;false;false;false
task::raw_waker::clone_waker;true;true;true;false
<collections::btree::map::IntoKeys<K, V, A> as core::iter::Iterator>::last;false;false;true;false
<boxed::Box<[T]> as boxed::convert::BoxFromSlice<T>>::from_slice;false;true;false;false
<boxed::Box<T, A> as core::cmp::PartialOrd>::lt;false;true;false;false
collections::vec_deque::VecDeque::<T, A>::handle_capacity_increase;true;true;true;false
<boxed::Box<T, A> as core::cmp::PartialOrd>::gt;false;true;false;false
collections::binary_heap::BinaryHeap::<T>::new;false;false;false;false
slice::<impl [T]>::sort_by_key;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::truncate;false;true;true;false
boxed::Box::<T>::from_non_null;true;true;true;false
bstr::<impl core::cmp::PartialOrd<borrow::Cow<'a, core::bstr::ByteStr>> for &'a core::bstr::ByteStr>::partial_cmp;false;false;true;false
<borrow::Cow<'_, T> as core::convert::AsRef<T>>::as_ref;false;false;true;false
<bstr::ByteString as core::iter::FromIterator<char>>::from_iter;false;false;false;true
collections::btree::map::CursorMut::<'a, K, V, A>::peek_next;false;false;true;false
sync::Arc::<T, A>::from_inner_in;true;false;true;false
<ffi::c_str::CString as core::ops::Deref>::deref;false;true;false;false
vec::Vec::<T, A>::shrink_to;false;false;true;false
vec::Vec::<T, A>::extend_from_slice;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::len;false;false;true;false
<collections::btree::set::Range<'_, T> as core::clone::Clone>::clone;false;false;true;false
collections::btree::map::entry::OccupiedEntry::<'a, K, V, A>::remove;false;false;true;false
<core::option::Option<core::num::NonZero<isize>> as vec::is_zero::IsZero>::is_zero;false;false;true;false
string::String::is_empty;false;false;true;false
<collections::btree::set::Range<'_, T> as core::default::Default>::default;false;false;false;false
sync::Arc::<[T], A>::new_uninit_slice_in;false;true;false;false
boxed::Box::<[core::mem::MaybeUninit<T>], A>::assume_init;true;true;false;false
<sync::Arc<[T], A> as core::convert::From<vec::Vec<T, A>>>::from;false;true;true;false
vec::Vec::<T, A>::extend_trusted;false;false;true;true
<vec::Vec<T, A> as core::ops::IndexMut<I>>::index_mut;false;false;true;false
boxed::iter::<impl core::iter::ExactSizeIterator for boxed::Box<I, A>>::is_empty;false;true;false;false
raw_vec::RawVec::<T, A>::try_reserve;false;false;true;false
sync::Arc::<T, A>::into_raw;false;false;true;false
<collections::btree::map::Range<'a, K, V> as core::iter::Iterator>::max;false;false;true;false
collections::binary_heap::BinaryHeap::<T, A>::sift_down_to_bottom;true;true;true;true
collections::btree::search::<impl collections::btree::node::NodeRef<BorrowType, K, V, Type>>::find_upper_bound_index;true;true;true;false
<bstr::ByteString as core::ops::Index<usize>>::index;false;false;true;false
boxed::convert::<impl boxed::Box<(dyn core::any::Any + 'static), A>>::downcast;false;true;false;false
raw_vec::RawVecInner::<A>::shrink_unchecked;true;true;true;false
<collections::vec_deque::into_iter::IntoIter<T, A> as core::iter::Iterator>::next_chunk;false;true;true;false
vec::set_len_on_drop::SetLenOnDrop::<'a>::current_len;false;false;true;false
<T as vec::spec_from_elem::SpecFromElem>::from_elem;false;false;false;false
vec::partial_eq::<impl core::cmp::PartialEq<&mut [U]> for borrow::Cow<'_, [T]>>::ne;false;false;true;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<collections::btree::node::marker::Mut<'a>, K, V, collections::btree::node::marker::LeafOrInternal>, Type>::cast_to_leaf_unchecked;true;true;true;false
<ffi::c_str::CString as core::convert::From<&core::ffi::CStr>>::from;false;false;false;false
collections::btree::map::BTreeMap::<K, V, A>::pop_first;false;false;true;false
collections::btree::set::BTreeSet::<T, A>::is_subset;false;false;true;true
collections::vec_deque::VecDeque::<T, A>::swap_remove_front;false;false;true;false
rc::Rc::<T, A>::strong_count;false;false;true;false
rc::Rc::<T>::from_raw;true;true;true;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<collections::btree::node::marker::Mut<'a>, K, V, collections::btree::node::marker::Leaf>, collections::btree::node::marker::Edge>::insert_recursing;false;true;true;true
collections::btree::search::<impl collections::btree::node::NodeRef<BorrowType, K, V, collections::btree::node::marker::LeafOrInternal>>::search_tree;false;false;true;true
<collections::btree::map::ExtractIf<'_, K, V, F, A> as core::iter::Iterator>::next;false;false;true;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<collections::btree::node::marker::Mut<'a>, K, V, collections::btree::node::marker::Leaf>, collections::btree::node::marker::Edge>::insert_fit;true;true;true;false
<collections::btree::set::Intersection<'a, T, A> as core::iter::Iterator>::min;false;false;true;false
collections::btree::navigate::<impl collections::btree::node::Handle<collections::btree::node::NodeRef<BorrowType, K, V, collections::btree::node::marker::LeafOrInternal>, collections::btree::node::marker::KV>>::next_back_leaf_edge;false;false;true;false
collections::btree::borrow::DormantMutRef::<'a, T>::reborrow_shared;true;true;true;false
<&[u8] as ffi::c_str::CString::new::SpecNewImpl>::spec_new_impl;false;false;false;false
<collections::btree::mem::replace::PanicGuard as core::ops::Drop>::drop;false;false;true;false
ffi::c_str::CString::into_string;false;false;false;false
<rc::Rc<str> as core::convert::From<&str>>::from;false;true;false;false
collections::btree::node::InternalNode::<K, V>::new;true;true;false;false
rc::Rc::<T, A>::try_unwrap;false;true;true;false
boxed::Box::<T, A>::from_non_null_in;true;true;true;false
collections::btree::map::ExtractIfInner::<'a, K, V>::next;false;false;true;true
<collections::btree::navigate::LazyLeafHandle<collections::btree::node::marker::Immut<'a>, K, V> as core::clone::Clone>::clone;false;false;true;false
<collections::vec_deque::into_iter::IntoIter<T, A> as core::iter::Iterator>::last;false;false;true;false
<string::String as core::clone::Clone>::clone;false;false;true;false
<vec::into_iter::IntoIter<T, A> as core::default::Default>::default;false;false;false;false
collections::btree::search::IndexResult::Edge;false;false;false;false
sync::Arc::<T, A>::unwrap_or_clone;false;false;true;false
collections::vec_deque::into_iter::IntoIter::<T, A>::into_vecdeque;false;false;true;false
boxed::Box::<[T], A>::new_uninit_slice_in;false;true;false;false
boxed::thin::ThinBox::<T>::with_header;false;true;true;false
<collections::btree::map::IntoValues<K, V, A> as core::default::Default>::default;false;false;false;false
alloc::realloc;true;true;true;false
rc::Rc::<T, A>::try_new_uninit_in;false;true;false;false
<collections::btree::set::BTreeSet<T, A> as core::cmp::PartialOrd>::partial_cmp;false;false;true;false
alloc::dealloc;true;true;true;false
<collections::binary_heap::BinaryHeap<T, A> as core::iter::Extend<T>>::extend;false;false;true;false
<rc::UniqueRc<T, A> as core::borrow::Borrow<T>>::borrow;false;false;true;false
<string::String as core::iter::FromIterator<borrow::Cow<'a, str>>>::from_iter;false;false;false;false
<string::IntoChars as core::fmt::Debug>::fmt;false;false;true;false
vec::Vec::<T, A>::into_parts;false;true;true;false
vec::Vec::<T, A>::retain_mut::process_loop;false;true;true;true
<vec::Vec<T, A> as core::iter::Extend<T>>::extend_one;false;false;true;false
collections::btree::set::SymmetricDifference;false;false;true;false
collections::btree::node::LeafNode::<K, V>::init;true;true;true;false
<bstr::ByteString as core::ops::IndexMut<core::ops::RangeFrom<usize>>>::index_mut;false;false;true;false
rc::data_offset;true;true;true;false
sync::Arc::<T>::decrement_strong_count;true;true;true;false
ffi::c_str::<impl core::convert::From<&core::ffi::CStr> for rc::Rc<core::ffi::CStr>>::from;false;true;false;false
rc::Weak::<T, A>::from_raw_in;true;true;true;false
ffi::c_str::<impl core::convert::From<&'a core::ffi::CStr> for borrow::Cow<'a, core::ffi::CStr>>::from;false;false;false;false
<collections::btree::map::IntoKeys<K, V, A> as core::fmt::Debug>::fmt;false;false;true;false
<i8 as vec::is_zero::IsZero>::is_zero;false;false;false;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<BorrowType, K, V, NodeType>, collections::btree::node::marker::Edge>::right_kv;false;true;true;false
<vec::Vec<T, A> as core::clone::Clone>::clone_from;false;false;true;false
collections::btree::map::BTreeMap::<K, V, A>::remove;false;false;true;false
rc::Rc::<T, A>::new_cyclic_in;false;true;false;false
collections::btree::node::NodeRef::<collections::btree::node::marker::Owned, K, V, collections::btree::node::marker::LeafOrInternal>::pop_internal_level;false;true;true;false
task::local_raw_waker::wake;true;true;true;false
<ffi::c_str::IntoStringError as core::fmt::Debug>::fmt;false;false;true;false
sync::Arc::<T, A>::try_pin_in;false;true;false;false
<collections::binary_heap::PeekMut<'_, T, A> as core::ops::DerefMut>::deref_mut;false;true;true;false
<&&&&&str as string::SpecToString>::spec_to_string;false;false;false;false
string::FromUtf16Error;false;false;false;false
collections::btree::set::CursorMutKey::<'a, T, A>::insert_after;false;false;true;false
sync::Arc::<(dyn core::any::Any + core::marker::Send + core::marker::Sync + 'static), A>::downcast;false;true;true;false
<string::String as core::convert::From<char>>::from;false;false;false;false
collections::btree::node::ForceResult::Internal;false;false;false;false
<string::String as core::ops::IndexMut<I>>::index_mut;false;false;true;false
<collections::vec_deque::VecDeque<T, A> as core::ops::Drop>::drop::Dropper;false;false;true;false
<collections::btree::map::Keys<'a, K, V> as core::iter::DoubleEndedIterator>::next_back;false;false;true;false
alloc::alloc_zeroed;true;true;false;false
collections::vec_deque::VecDeque::<T, A>::as_slices;false;true;true;false
<collections::linked_list::LinkedList<T, A> as core::cmp::PartialEq>::eq;false;false;true;false
<sync::Arc<B> as core::convert::From<borrow::Cow<'a, B>>>::from;false;false;true;false
collections::btree::node::NodeRef::<collections::btree::node::marker::Mut<'a>, K, V, Type>::as_leaf_mut;false;true;true;false
raw_vec::new_cap;true;true;false;false
raw_vec::RawVec::<T, A>::capacity;false;false;true;false
raw_vec::RawVecInner::<A>::grow_one;false;false;true;false
collections::btree::node::NodeRef::<collections::btree::node::marker::Owned, K, V, Type>::into_dying;false;false;true;false
string::String::from_utf16le_lossy;false;true;false;true
collections::vec_deque::VecDeque::<T, A>::remove;false;true;true;false
<sync::Arc<[u8]> as core::convert::From<sync::Arc<str>>>::from;false;true;true;false
collections::btree::search::SearchBound::Included;false;false;false;false
collections::vec_deque::VecDeque::<T, A>::pop_back_if;false;false;true;false
boxed::convert::<impl core::convert::From<&str> for boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync + 'a)>>::from;false;false;false;false
collections::vec_deque::VecDeque::<T, A>::partition_point;false;false;true;false
collections::btree::set::entry::VacantEntry::<'a, T, A>::insert_entry;false;false;true;false
rc::Rc::<T>::decrement_strong_count;true;true;true;false
vec::in_place_collect::needs_realloc;false;false;false;false
<<collections::vec_deque::into_iter::IntoIter<T, A> as core::iter::Iterator>::try_fold::Guard<'a, T, A> as core::ops::Drop>::drop;false;false;true;false
string::<impl core::cmp::PartialEq<borrow::Cow<'a, str>> for &'b str>::ne;false;false;true;false
collections::btree::map::CursorMut::<'a, K, V, A>::peek_prev;false;false;true;false
bstr::<impl core::cmp::PartialOrd<&'a core::bstr::ByteStr> for borrow::Cow<'a, [u8]>>::partial_cmp;false;false;true;false
ffi::c_str::NulError::nul_position;false;false;true;false
collections::btree::node::BalancingContext::<'a, K, V>::do_merge;false;true;true;false
<collections::btree::set::entry::VacantEntry<'_, T, A> as core::fmt::Debug>::fmt;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::wrap_copy;true;true;true;false
<collections::btree::set::Iter<'a, T> as core::iter::DoubleEndedIterator>::next_back;false;false;true;false
<collections::btree::map::Range<'a, K, V> as core::iter::DoubleEndedIterator>::next_back;false;false;true;false
<vec::Vec<T> as core::default::Default>::default;false;false;false;false
"<sync::Arc<[T]> as core::convert::From<[T; N]>>::from";false;false;false;false
string::String::from_utf8_unchecked;true;false;true;false
boxed::iter::<impl core::iter::FromIterator<&'a char> for boxed::Box<str>>::from_iter;false;false;false;false
raw_vec::RawVecInner::<A>::with_capacity_zeroed_in;false;false;false;false
sync::UniqueArcUninit::<T, A>::data_ptr;false;true;true;false
<collections::btree::map::IterMut<'a, K, V> as core::default::Default>::default;false;false;false;false
<rc::Rc<T, A> as core::ops::Drop>::drop;false;true;true;false
<sync::Arc<T, A> as sync::ArcEqIdent<T, A>>::eq;false;false;true;false
bstr::<impl core::convert::From<boxed::Box<core::bstr::ByteStr>> for boxed::Box<[u8]>>::from;false;true;false;false
<&&str as string::SpecToString>::spec_to_string;false;false;false;false
<(D, E, F, G, H) as vec::is_zero::IsZero>::is_zero;false;false;false;false
<vec::Vec<T> as vec::spec_from_iter_nested::SpecFromIterNested<T, I>>::from_iter;false;true;false;false
<<collections::linked_list::LinkedList<T, A> as core::ops::Drop>::drop::DropGuard<'a, T, A> as core::ops::Drop>::drop;false;false;true;true
collections::btree::navigate::Position::Leaf;false;false;true;false
raw_vec::RawVecInner::<A>::non_null;false;false;true;false
<collections::vec_deque::VecDeque<T, A>::write_iter_wrapping::Guard<'a, T, A> as core::ops::Drop>::drop;false;false;true;false
string::<impl core::cmp::PartialEq<borrow::Cow<'a, str>> for &'b str>::eq;false;false;true;false
<boxed::Box<T, A> as core::borrow::BorrowMut<T>>::borrow_mut;false;true;true;false
<I as rc::ToRcSlice<T>>::to_rc_slice;false;false;false;true
<ffi::c_str::CString as core::convert::From<boxed::Box<core::ffi::CStr>>>::from;false;true;false;false
boxed::Box::<[T], A>::try_new_uninit_slice_in;false;true;false;false
collections::linked_list::Cursor::<'a, T, A>::index;false;false;true;false
<rc::Rc<T, A> as core::cmp::PartialEq>::eq;false;false;true;false
<core::option::Option<core::num::NonZero<u16>> as vec::is_zero::IsZero>::is_zero;false;false;true;false
vec::Vec::<T, A>::shrink_to_fit;false;false;true;false
<collections::btree::map::ExtractIf<'_, K, V, F> as core::fmt::Debug>::fmt;false;false;true;false
<vec::into_iter::IntoIter<T, A> as core::iter::Iterator>::try_fold;false;true;true;true
<bstr::ByteString as core::borrow::BorrowMut<[u8]>>::borrow_mut;false;false;true;false
<rc::UniqueRc<T, A> as core::cmp::Ord>::cmp;false;false;true;false
collections::binary_heap::BinaryHeap::<T, A>::sift_down;true;true;true;false
ffi::c_str::CString::into_raw;false;false;false;false
bstr::<impl core::convert::From<sync::Arc<[u8]>> for sync::Arc<core::bstr::ByteStr>>::from;false;true;true;false
<ffi::c_str::CString as core::cmp::Ord>::cmp;false;false;false;false
collections::btree::navigate::LazyLeafRange::<collections::btree::node::marker::Dying, K, V>::deallocating_end;false;false;true;false
sync::Arc::<T>::initialize_arcinner;true;true;true;false
collections::btree::map::BTreeMap::<K, V, A>::into_values;false;false;true;false
<collections::binary_heap::Iter<'_, T> as core::default::Default>::default;false;false;false;false
collections::btree::set::CursorMut::<'a, T, A>::next;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::buffer_read;true;true;true;false
collections::vec_deque::VecDeque::<T, A>::clear;false;false;true;false
<collections::btree::set::BTreeSet<T, A> as core::hash::Hash>::hash;false;false;true;false
sync::Arc::<T, A>::try_new_in;false;true;false;false
<bstr::ByteString as core::cmp::Ord>::cmp;false;false;true;false
<collections::vec_deque::VecDeque<T, A> as core::iter::Extend<T>>::extend_reserve;false;false;true;false
str::<impl str>::to_lowercase::case_ignorable_then_cased;false;false;false;false
<string::String as core::convert::From<borrow::Cow<'a, str>>>::from;false;false;true;false
<vec::extract_if::ExtractIf<'_, T, F, A> as core::iter::Iterator>::next;false;true;true;true
collections::btree::navigate::<impl collections::btree::node::NodeRef<collections::btree::node::marker::Immut<'a>, K, V, collections::btree::node::marker::LeafOrInternal>>::range_search;false;true;true;false
<bstr::ByteString as core::convert::AsRef<core::bstr::ByteStr>>::as_ref;false;false;true;false
<collections::vec_deque::drain::Drain<'_, T, A> as core::ops::Drop>::drop;false;true;true;false
collections::btree::set::BTreeSet::<T, A>::union;false;false;true;false
rc::Rc::<[T], A>::allocate_for_slice_in;true;true;false;false
<collections::btree::map::UnorderedKeyError as core::cmp::Eq>::assert_receiver_is_total_eq;false;false;false;false
string::<impl core::iter::FromIterator<string::String> for borrow::Cow<'a, str>>::from_iter;false;false;false;false
task::local_raw_waker;false;false;true;false
<collections::btree::map::Keys<'a, K, V> as core::iter::Iterator>::last;false;false;true;false
<collections::btree::set_val::SetValZST as core::hash::Hash>::hash;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::binary_search_by_key;false;false;true;false
sync::Arc::<T>::new_uninit;false;true;false;false
<vec::Vec<T> as vec::spec_from_iter_nested::SpecFromIterNested<T, I>>::from_iter;false;false;false;false
<core::option::Option<core::num::NonZero<u32>> as vec::is_zero::IsZero>::is_zero;false;false;true;false
<vec::Vec<T, A> as vec::spec_extend::SpecExtend<T, I>>::spec_extend;false;false;true;false
collections::btree::map::BTreeMap::<K, V, A>::pop_last;false;false;true;false
<bstr::ByteString as core::ops::IndexMut<core::ops::RangeFull>>::index_mut;false;false;true;false
string::String::as_bytes;false;false;true;false
<collections::btree::node::Handle<collections::btree::node::NodeRef<BorrowType, K, V, NodeType>, HandleType> as core::cmp::PartialEq>::eq;false;false;true;false
<collections::linked_list::IterMut<'a, T> as core::iter::Iterator>::last;false;false;true;false
collections::linked_list::Node::<T>::new;false;false;false;false
vec::Vec::<T, A>::extend_desugared;false;true;true;true
<collections::btree::map::Keys<'a, K, V> as core::iter::Iterator>::max;false;false;true;false
<collections::btree::map::IntoIter<K, V, A> as core::default::Default>::default;false;false;false;false
<collections::linked_list::LinkedList<T, A> as core::clone::Clone>::clone_from;false;false;true;true
alloc::Global::grow_impl;true;true;true;false
<ffi::c_str::IntoStringError as core::clone::Clone>::clone;false;false;true;false
<borrow::Cow<'_, B> as core::clone::Clone>::clone_from;false;false;true;false
<collections::linked_list::IntoIter<T> as core::default::Default>::default;false;false;false;false
<bstr::ByteString as core::cmp::PartialOrd<borrow::Cow<'_, [u8]>>>::partial_cmp;false;false;true;false
rc::Rc::<T, A>::allocator;false;false;true;false
borrow::Cow::<'_, B>::is_owned;false;false;true;false
<borrow::Cow<'a, str> as core::ops::Add<&'a str>>::add;false;false;true;false
<collections::vec_deque::VecDeque<T, A> as core::clone::Clone>::clone;false;false;true;false
string::String::reserve;false;false;true;false
<collections::vec_deque::iter_mut::IterMut<'_, T> as core::iter::ExactSizeIterator>::len;false;false;true;false
<vec::into_iter::IntoIter<T, A> as core::iter::Iterator>::advance_by;false;true;true;false
<vec::Vec<T, A> as core::iter::Extend<T>>::extend_reserve;false;false;true;false
boxed::Box::<T, A>::into_raw;false;true;false;false
collections::vec_deque::VecDeque::<T, A>::buffer_write;true;true;true;false
vec::Vec::<T, A>::append;false;true;true;false
collections::linked_list::LinkedList::<T, A>::clear;false;false;true;false
boxed::convert::<impl core::convert::From<&mut str> for boxed::Box<str>>::from;false;false;true;false
<collections::btree::map::UnorderedKeyError as core::fmt::Debug>::fmt;false;false;true;false
collections::linked_list::CursorMut::<'a, T, A>::front_mut;false;false;true;false
boxed::convert::<impl boxed::Box<(dyn core::any::Any + core::marker::Send + 'static), A>>::downcast_unchecked;true;true;false;false
<string::FromUtf8Error as core::error::Error>::description;false;false;true;false
<collections::vec_deque::VecDeque<T, A> as core::cmp::PartialOrd>::partial_cmp;false;false;true;false
collections::binary_heap::BinaryHeap::<T, A>::clear;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::as_mut_slices;false;true;true;false
<sync::Arc<T, A> as core::borrow::Borrow<T>>::borrow;false;false;true;false
collections::btree::set::BTreeSet::<T, A>::lower_bound_mut;false;false;true;false
<collections::vec_deque::VecDeque<T, A> as core::ops::IndexMut<usize>>::index_mut;false;false;true;false
sync::Weak::<T, A>::into_raw;false;false;true;false
sync::Arc::<T>::try_allocate_for_layout;true;true;false;false
<rc::UniqueRc<T, A> as core::cmp::PartialOrd>::partial_cmp;false;false;true;false
<core::option::Option<u32> as vec::is_zero::IsZero>::is_zero;false;false;false;false
raw_vec::RawVecInner::<A>::try_allocate_in;false;true;false;false
collections::btree::navigate::LazyLeafRange::<BorrowType, K, V>::init_back;false;true;true;false
<collections::binary_heap::IntoIter<T, A> as core::iter::ExactSizeIterator>::is_empty;false;false;true;false
<collections::vec_deque::VecDeque<T, A> as collections::vec_deque::spec_extend::SpecExtend<&'a T, core::slice::Iter<'a, T>>>::spec_extend;false;true;true;false
collections::btree::map::CursorMutKey::<'a, K, V, A>::prev;false;true;true;false
<collections::vec_deque::VecDeque<T, A>::truncate::Dropper<'a, T> as core::ops::Drop>::drop;false;true;true;false
collections::btree::node::NodeRef::<BorrowType, K, V, Type>::ascend;false;true;true;false
vec::Vec::<T, A>::capacity;false;false;true;false
sync::Arc::<T, A>::strong_count;false;false;true;false
collections::btree::node::NodeRef::<collections::btree::node::marker::Owned, K, V, collections::btree::node::marker::Leaf>::new_leaf;false;false;false;false
<collections::binary_heap::BinaryHeap<T> as core::iter::FromIterator<T>>::from_iter;false;false;false;true
collections::btree::node::BalancingContext::<'a, K, V>::steal_left;false;true;true;false
"vec::partial_eq::<impl core::cmp::PartialEq<&[U; N]> for vec::Vec<T, A>>::ne";false;false;true;false
ffi::c_str::CString::new::spec_new_impl_bytes;false;true;false;false
string::String::from_utf16le;false;true;false;true
collections::btree::map::CursorMut::<'a, K, V, A>::with_mutable_key;true;false;true;false
collections::btree::map::CursorMutKey::<'a, K, V, A>::remove_next;false;true;true;false
"vec::partial_eq::<impl core::cmp::PartialEq<&[U; N]> for vec::Vec<T, A>>::eq";false;false;true;false
<bstr::ByteString as core::ops::Index<core::ops::RangeFrom<usize>>>::index;false;false;true;false
collections::linked_list::LinkedList::<T, A>::retain;false;false;true;false
<string::Drain<'_> as core::iter::Iterator>::size_hint;false;false;true;false
<string::Drain<'_> as core::iter::Iterator>::last;false;false;true;false
collections::btree::map::CursorMutKey::<'a, K, V, A>::insert_after;false;true;true;false
"<collections::binary_heap::BinaryHeap<T> as core::convert::From<[T; N]>>::from";false;false;false;false
<boxed::Box<T> as core::default::Default>::default;false;true;false;false
collections::btree::navigate::LeafRange::<collections::btree::node::marker::ValMut<'a>, K, V>::next_back_checked;false;false;true;false
<&&&&&&str as string::SpecToString>::spec_to_string;false;false;false;false
<rc::RcInner<T> as rc::RcInnerPtr>::weak_ref;false;false;true;false
"<bstr::ByteString as core::cmp::PartialEq<&[u8; N]>>::eq";false;false;true;false
<collections::btree::map::BTreeMap<K, V, A> as core::iter::Extend<(&'a K, &'a V)>>::extend_one;false;false;true;false
ffi::c_str::CString::into_bytes;false;false;false;false
rc::Rc::<T>::allocate_for_layout;true;true;false;false
"<vec::Vec<T> as core::convert::From<&mut [T; N]>>::from";false;false;true;false
bstr::<impl core::cmp::PartialEq<bstr::ByteString> for core::bstr::ByteStr>::eq;false;false;true;false
<boxed::Box<T, A> as core::cmp::PartialEq>::ne;false;true;false;false
boxed::convert::<impl core::convert::From<boxed::Box<T, A>> for core::pin::Pin<boxed::Box<T, A>>>::from;false;false;false;false
<collections::btree::map::IntoIter<K, V, A> as core::iter::Iterator>::size_hint;false;false;true;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<collections::btree::node::marker::Mut<'a>, K, V, collections::btree::node::marker::Internal>, collections::btree::node::marker::Edge>::insert_fit;false;true;true;false
rc::Rc::<[T]>::copy_from_slice;true;true;false;false
collections::btree::set::CursorMutKey::<'a, T, A>::insert_before;false;false;true;false
<collections::btree::map::RangeMut<'_, K, V> as core::fmt::Debug>::fmt;false;false;true;false
collections::btree::merge_iter::MergeIterInner::<I>::lens;false;false;true;false
sync::Arc::<T, A>::into_inner_with_allocator;false;true;true;false
<&'b string::String as core::str::pattern::Pattern>::is_suffix_of;false;false;true;false
<sync::Arc<[T]> as core::default::Default>::default;false;true;false;false
<collections::btree::map::Iter<'a, K, V> as core::iter::Iterator>::last;false;false;true;false
collections::linked_list::LinkedList::<T, A>::extract_if;false;false;true;false
string::<impl core::convert::From<&'a string::String> for borrow::Cow<'a, str>>::from;false;false;true;false
<collections::btree::merge_iter::Peeked<I> as core::fmt::Debug>::fmt;false;false;true;false
<collections::vec_deque::VecDeque<T, A> as collections::vec_deque::spec_extend::SpecExtend<T, I>>::spec_extend;false;true;true;false
<ffi::c_str::NulError as core::clone::Clone>::clone;false;false;true;false
collections::linked_list::LinkedList::<T, A>::unlink_node;true;true;true;false
bstr::<impl core::cmp::PartialOrd<bstr::ByteString> for borrow::Cow<'_, core::bstr::ByteStr>>::partial_cmp;false;false;true;false
vec::Vec::<T, A>::retain_mut;false;true;true;false
collections::linked_list::CursorMut::<'a, T, A>::back_mut;false;false;true;false
raw_vec::RawVecInner::<A>::reserve_exact;false;false;true;false
rc::Rc::<T, A>::into_raw;false;false;true;false
<collections::vec_deque::iter_mut::IterMut<'_, T> as core::default::Default>::default;false;false;false;false
bstr::<impl core::convert::From<boxed::Box<[u8]>> for boxed::Box<core::bstr::ByteStr>>::from;false;true;false;false
collections::btree::merge_iter::Peeked::A;false;false;false;false
<sync::Arc<T, A> as core::cmp::PartialEq>::eq;false;false;true;false
vec::from_elem_in;false;false;false;false
task::<impl core::convert::From<sync::Arc<W>> for core::task::Waker>::from;false;true;true;false
collections::btree::map::IterMut::<'a, K, V>::iter;false;false;true;false
<collections::TryReserveErrorKind as core::clone::Clone>::clone;false;false;false;false
collections::btree::set::CursorMut::<'a, T, A>::remove_next;false;false;true;false
rc::Rc::<T, A>::as_ptr;false;true;true;false
<borrow::Cow<'_, B> as core::default::Default>::default;false;false;false;false
rc::RcInnerPtr::dec_weak;false;false;false;false
string::String::from_utf16_lossy;false;false;false;true
<collections::vec_deque::iter::Iter<'a, T> as core::iter::DoubleEndedIterator>::try_rfold;false;false;true;false
boxed::Box::<T, A>::new_in;false;true;false;false
<bstr::ByteString as core::ops::IndexMut<core::ops::Range<usize>>>::index_mut;false;false;true;false
<boxed::Box<T, A> as core::cmp::PartialOrd>::le;false;true;false;false
collections::linked_list::CursorMut::<'a, T, A>::current;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::swap;false;true;true;false
bstr::<impl core::cmp::PartialEq<bstr::ByteString> for borrow::Cow<'_, str>>::eq;false;false;true;false
rc::Rc::<(dyn core::any::Any + 'static), A>::downcast;false;true;true;false
<core::option::Option<i16> as vec::is_zero::IsZero>::is_zero;false;false;false;false
boxed::iter::<impl core::iter::DoubleEndedIterator for boxed::Box<I, A>>::next_back;false;true;true;false
<boxed::thin::ThinBox<T> as core::ops::DerefMut>::deref_mut;false;true;true;false
raw_vec::RawVecInner::<A>::grow_exact;false;true;true;false
<string::String as core::iter::Extend<char>>::extend;false;false;true;true
<vec::Vec<T, A> as core::iter::Extend<&'a T>>::extend_one;false;false;true;false
<u32 as vec::is_zero::IsZero>::is_zero;false;false;false;false
collections::btree::node::NodeRef::<BorrowType, K, V, collections::btree::node::marker::LeafOrInternal>::force;false;false;true;false
collections::btree::node::slice_remove;true;true;true;false
<char as string::SpecToString>::spec_to_string;false;false;false;false
bstr::<impl core::cmp::PartialOrd<&'a core::bstr::ByteStr> for borrow::Cow<'a, core::bstr::ByteStr>>::partial_cmp;false;false;true;false
raw_vec::RawVecInner::<A>::current_memory;false;true;true;false
<boxed::Box<T, A> as core::hash::Hasher>::write_i128;false;true;true;false
<collections::binary_heap::IntoIterSorted<T, A> as core::iter::Iterator>::next;false;false;true;false
<collections::btree::map::ValuesMut<'a, K, V> as core::iter::Iterator>::size_hint;false;false;true;false
<ffi::c_str::FromVecWithNulError as core::cmp::PartialEq>::eq;false;false;true;false
<ffi::c_str::CString as core::default::Default>::default;false;false;false;false
collections::btree::node::NodeRef::<collections::btree::node::marker::Mut<'a>, K, V, collections::btree::node::marker::Internal>::as_internal_mut;false;true;true;false
collections::vec_deque::VecDeque::<T, A>::rotate_right_inner;true;true;true;false
sync::Arc::<T, A>::allocator;false;false;true;false
vec::Vec::<T>::from_parts;true;true;true;false
collections::btree::set::CursorMutKey::<'a, T, A>::insert_before_unchecked;true;true;true;false
<collections::btree::set_val::SetValZST as core::clone::Clone>::clone;false;false;false;false
"vec::partial_eq::<impl core::cmp::PartialEq<[U; N]> for vec::Vec<T, A>>::eq";false;false;true;false
<collections::TryReserveErrorKind as core::convert::From<core::alloc::LayoutError>>::from;false;false;false;false
<collections::binary_heap::Drain<'_, T, A> as core::iter::DoubleEndedIterator>::next_back;false;false;true;false
<collections::btree::map::IntoKeys<K, V, A> as core::iter::DoubleEndedIterator>::next_back;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::range_mut;false;true;true;false
vec::splice::<impl vec::drain::Drain<'_, T, A>>::move_tail;true;true;true;false
collections::btree::node::Handle::<Node, Type>::into_node;false;false;true;false
<&'a mut collections::btree::map::BTreeMap<K, V, A> as core::iter::IntoIterator>::into_iter;false;false;true;false
<boxed::thin::WithHeader<H>::drop::DropGuard<H> as core::ops::Drop>::drop;false;true;true;false
collections::btree::node::SplitResult::<'a, K, V, collections::btree::node::marker::Leaf>::forget_node_type;false;false;true;false
<collections::btree::map::BTreeMap<K, V> as core::iter::FromIterator<(K, V)>>::from_iter;false;false;false;true
<I as rc::ToRcSlice<T>>::to_rc_slice;false;true;false;false
<vec::splice::Splice<'_, I, A> as core::iter::Iterator>::next;false;false;true;false
<boxed::Box<E> as core::error::Error>::provide;false;true;true;false
<collections::linked_list::IntoIter<T, A> as core::iter::DoubleEndedIterator>::next_back;false;false;true;false
<string::String as core::convert::From<&string::String>>::from;false;false;true;false
sync::Weak::<T, A>::ptr_eq;false;false;true;false
collections::btree::node::BalancingContext::<'a, K, V>::merge_tracking_child_edge;false;true;true;false
<bstr::ByteString as core::ops::Index<core::ops::RangeToInclusive<usize>>>::index;false;false;true;false
<vec::into_iter::IntoIter<T, A> as core::iter::Iterator>::fold;false;true;true;true
<vec::Vec<T> as core::convert::From<&mut [T]>>::from;false;false;true;false
collections::btree::map::entry::Entry::<'a, K, V, A>::or_insert_with;false;false;true;false
sync::Weak::<T>::new;false;false;false;false
<bstr::ByteString as core::iter::FromIterator<u8>>::from_iter;false;false;false;true
collections::btree::set::entry::OccupiedEntry::<'a, T, A>::get;false;false;true;false
rc::is_dangling;false;false;true;false
slice::<impl core::borrow::Borrow<[T]> for vec::Vec<T, A>>::borrow;false;false;true;false
<boxed::Box<F, A> as core::ops::FnOnce<Args>>::call_once;false;true;false;false
collections::btree::set::BTreeSet::<T, A>::pop_first;false;false;true;false
raw_vec::RawVecInner::<A>::capacity;false;false;true;false
collections::btree::fix::<impl collections::btree::node::NodeRef<collections::btree::node::marker::Mut<'a>, K, V, collections::btree::node::marker::LeafOrInternal>>::fix_node_through_parent;false;false;true;false
collections::btree::map::entry::VacantEntry::<'a, K, V, A>::into_key;false;false;true;false
<collections::btree::map::BTreeMap<K, V, A> as core::iter::Extend<(&'a K, &'a V)>>::extend;false;false;true;false
<ffi::c_str::NulError as core::fmt::Debug>::fmt;false;false;true;false
slice::<impl [u8]>::to_ascii_uppercase;false;false;false;false
<ffi::c_str::CString as core::convert::From<borrow::Cow<'a, core::ffi::CStr>>>::from;false;false;true;false
collections::btree::map::entry::Entry::<'a, K, V, A>::and_modify;false;false;true;false
rc::Rc::<T, A>::allocate_for_ptr_in;true;true;true;false
<rc::Rc<str> as core::convert::From<&mut str>>::from;false;false;true;false
collections::btree::set::CursorMutKey::<'a, T, A>::prev;false;false;true;false
<bstr::ByteString as core::ops::IndexMut<usize>>::index_mut;false;false;true;false
<vec::Vec<T, A> as vec::ExtendFromWithinSpec>::spec_extend_from_within;true;true;true;true
collections::btree::search::SearchBound::<T>::from_range;false;false;true;false
collections::btree::navigate::LeafRange::<BorrowType, K, V>::perform_next_checked;false;false;true;false
<collections::btree::map::BTreeMap<K, V, A> as core::iter::IntoIterator>::into_iter;false;true;true;false
<vec::Vec<T, A> as core::convert::AsRef<[T]>>::as_ref;false;false;true;false
<collections::btree::set::Cursor<'a, K> as core::clone::Clone>::clone;false;false;true;false
<boxed::Box<T, A> as core::ops::DerefMut>::deref_mut;false;true;true;false
collections::btree::map::BTreeMap::<K, V, A>::iter_mut;false;false;true;false
sync::Weak::<T, A>::allocator;false;false;true;false
<T as vec::spec_from_elem::SpecFromElem>::from_elem;false;false;false;false
task::local_raw_waker::wake_by_ref;true;true;true;false
collections::btree::node::NodeRef::<collections::btree::node::marker::Mut<'a>, K, V, collections::btree::node::marker::Internal>::correct_childrens_parent_links;true;true;true;true
<boxed::convert::<impl core::convert::From<string::String> for boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync + 'a)>>::from::StringError as core::fmt::Display>::fmt;false;false;true;false
<alloc::Global as core::clone::Clone>::clone;false;false;false;false
<&'a mut collections::vec_deque::VecDeque<T, A> as core::iter::IntoIterator>::into_iter;false;false;true;false
<vec::extract_if::ExtractIf<'_, T, F, A> as core::ops::Drop>::drop;false;true;true;false
<string::String as core::iter::Extend<core::ascii::Char>>::extend_one;false;false;true;false
<vec::Vec<T, A> as core::iter::IntoIterator>::into_iter;false;true;true;false
vec::Vec::<T, A>::append_elements;true;true;true;false
<collections::vec_deque::iter_mut::IterMut<'a, T> as core::iter::Iterator>::fold;false;false;true;true
collections::btree::map::BTreeMap::<K, V, A>::last_entry;false;false;true;false
alloc::alloc;true;true;false;false
<bstr::ByteString as core::borrow::Borrow<core::bstr::ByteStr>>::borrow;false;false;true;false
rc::Weak::<T, A>::inner;false;true;true;false
string::<impl core::cmp::PartialEq<string::String> for str>::eq;false;false;true;false
ffi::c_str::CString::new;false;false;false;false
<<collections::vec_deque::into_iter::IntoIter<T, A> as core::iter::DoubleEndedIterator>::try_rfold::Guard<'a, T, A> as core::ops::Drop>::drop;false;false;true;false
<boxed::Box<F, A> as core::ops::AsyncFn<Args>>::async_call;false;true;false;false
<string::String as core::iter::Extend<&'a char>>::extend;false;false;true;false
str::<impl str>::into_string;false;true;false;false
slice::<impl core::slice::sort::stable::BufGuard<T> for vec::Vec<T>>::as_uninit_slice_mut;false;false;true;false
collections::vec_deque::drain::Drain::<'a, T, A>::as_slices;true;true;true;false
string::FromUtf8Error::into_utf8_lossy;false;true;true;true
<collections::linked_list::LinkedList<T> as core::default::Default>::default;false;false;false;false
<core::option::Option<isize> as vec::is_zero::IsZero>::is_zero;false;false;false;false
vec::partial_eq::<impl core::cmp::PartialEq<vec::Vec<U, A>> for &[T]>::ne;false;false;true;false
collections::btree::navigate::LeafRange::<collections::btree::node::marker::Immut<'a>, K, V>::next_checked;false;false;true;false
collections::btree::navigate::LeafRange::<BorrowType, K, V>::is_empty;false;false;true;false
collections::btree::set::BTreeSet::<T, A>::get_or_insert_with;false;false;true;false
<string::FromUtf16Error as core::fmt::Debug>::fmt;false;false;true;false
rc::Rc::<T>::try_new_zeroed;false;true;false;false
vec::cow::<impl core::convert::From<vec::Vec<T>> for borrow::Cow<'a, [T]>>::from;false;false;true;false
sync::Weak::<T, A>::upgrade;false;true;true;false
bstr::<impl core::cmp::PartialOrd<bstr::ByteString> for &core::bstr::ByteStr>::partial_cmp;false;false;true;false
<rc::UniqueRc<T, A> as core::ops::Drop>::drop;false;true;true;false
collections::vec_deque::VecDeque::<T, A>::retain_mut;false;false;true;true
<ffi::c_str::CString as core::str::FromStr>::from_str;false;false;false;false
<boxed::Box<T, A> as core::hash::Hasher>::write_u8;false;true;true;false
vec::Vec::<T, A>::split_off::assert_failed;false;false;false;false
rc::RcInnerPtr::inc_strong;false;true;false;false
<vec::drain::Drain<'_, T, A> as core::iter::Iterator>::size_hint;false;false;true;false
<<vec::into_iter::IntoIter<T, A> as core::ops::Drop>::drop::DropGuard<'_, T, A> as core::ops::Drop>::drop;false;true;true;false
collections::btree::map::CursorMut::<'a, K, V, A>::remove_prev;false;false;true;false
bstr::<impl core::convert::From<bstr::ByteString> for borrow::Cow<'a, core::bstr::ByteStr>>::from;false;false;true;false
bstr::<impl core::clone::Clone for boxed::Box<core::bstr::ByteStr>>::clone;false;true;false;false
<collections::btree::map::BTreeMap<K, V, A> as core::hash::Hash>::hash;false;false;true;true
collections::btree::node::marker::Immut;false;false;false;false
ffi::c_str::<impl core::default::Default for rc::Rc<core::ffi::CStr>>::default;false;true;false;false
raw_vec::RawVecInner::<A>::needs_to_grow;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::copy_nonoverlapping;true;true;true;false
<collections::TryReserveErrorKind as core::cmp::Eq>::assert_receiver_is_total_eq;false;false;false;false
collections::btree::navigate::Position::Internal;false;false;true;false
collections::btree::set::BTreeSet::<T, A>::symmetric_difference;false;false;true;false
<&'b string::String as core::str::pattern::Pattern>::is_prefix_of;false;false;true;false
<i32 as vec::is_zero::IsZero>::is_zero;false;false;false;false
<isize as vec::is_zero::IsZero>::is_zero;false;false;false;false
str::<impl str>::to_uppercase;false;false;false;true
ffi::c_str::<impl core::convert::From<ffi::c_str::CString> for boxed::Box<core::ffi::CStr>>::from;false;false;false;false
collections::btree::map::entry::OccupiedEntry::<'a, K, V, A>::into_key;false;false;true;false
<collections::btree::map::IntoKeys<K, V, A> as core::iter::Iterator>::size_hint;false;false;true;false
string::Drain::<'a>::as_str;false;false;true;false
collections::btree::map::entry::Entry::<'a, K, V, A>::or_insert;false;false;true;false
collections::btree::node::NodeRef::<BorrowType, K, V, Type>::eq;false;false;true;false
<&collections::btree::set::BTreeSet<T, A> as core::ops::BitXor<&collections::btree::set::BTreeSet<T, A>>>::bitxor;false;false;true;false
<sync::Arc<T, A> as core::cmp::PartialOrd>::ge;false;false;true;false
<collections::vec_deque::iter_mut::IterMut<'a, T> as core::iter::DoubleEndedIterator>::rfold;false;false;true;false
<collections::vec_deque::iter_mut::IterMut<'a, T> as core::iter::DoubleEndedIterator>::try_rfold;false;false;true;false
boxed::Box::<T, A>::leak;false;true;false;false
collections::binary_heap::BinaryHeap::<T, A>::peek_mut;false;false;true;false
<boxed::Box<T, A> as core::hash::Hasher>::write_u128;false;true;true;false
collections::btree::node::NodeRef::<BorrowType, K, V, Type>::height;false;false;true;false
<sync::Arc<T, A> as core::convert::From<boxed::Box<T, A>>>::from;false;false;false;false
<boxed::Box<T, A> as core::hash::Hasher>::write_i8;false;true;true;false
<boxed::Box<T, A> as core::cmp::PartialOrd>::ge;false;true;false;false
collections::binary_heap::BinaryHeap::<T, A>::drain_sorted;false;false;true;false
<vec::drain::Drain<'_, T, A> as core::iter::DoubleEndedIterator>::next_back;false;false;true;false
<vec::into_iter::IntoIter<T, A> as core::convert::AsRef<[T]>>::as_ref;false;false;true;false
<&collections::btree::set::BTreeSet<T, A> as core::ops::BitOr<&collections::btree::set::BTreeSet<T, A>>>::bitor;false;false;true;false
raw_vec::RawVecInner::<A>::deallocate;true;true;true;false
collections::btree::set::BTreeSet::<T, A>::difference;false;false;true;false
vec::Vec::<T, A>::extend_with;false;true;true;true
vec::Vec::<T, A>::set_len;true;false;true;false
boxed::convert::<impl core::convert::From<&str> for boxed::Box<str>>::from;false;true;false;false
collections::btree::navigate::<impl collections::btree::node::Handle<collections::btree::node::NodeRef<collections::btree::node::marker::Immut<'a>, K, V, collections::btree::node::marker::Leaf>, collections::btree::node::marker::Edge>>::next_back_unchecked;true;false;true;false
<collections::btree::map::IntoIter<K, V, A> as core::fmt::Debug>::fmt;false;false;true;false
vec::Vec::<T, A>::split_at_spare_mut;false;true;true;false
bstr::<impl core::cmp::PartialEq<bstr::ByteString> for string::String>::eq;false;false;true;false
<collections::btree::map::IntoKeys<K, V, A> as core::iter::Iterator>::next;false;false;true;false
<collections::vec_deque::VecDeque<T, A> as core::convert::From<vec::Vec<T, A>>>::from;false;true;true;false
<vec::Vec<T, A> as core::ops::DerefMut>::deref_mut;false;false;true;false
<collections::btree::set_val::SetValZST as core::cmp::Ord>::cmp;false;false;false;false
collections::btree::search::IndexResult::KV;false;false;false;false
<collections::binary_heap::DrainSorted<'a, T, A> as core::ops::Drop>::drop::DropGuard;false;false;true;false
bstr::<impl core::convert::From<rc::Rc<[u8]>> for rc::Rc<core::bstr::ByteStr>>::from;false;true;true;false
<collections::vec_deque::iter::Iter<'a, T> as core::iter::Iterator>::fold;false;false;true;true
<rc::Rc<T, A> as core::convert::AsRef<T>>::as_ref;false;false;true;false
<collections::btree::map::BTreeMap<K, V, A> as core::cmp::PartialEq>::eq;false;false;true;true
collections::linked_list::LinkedList::<T, A>::push_back;false;true;true;false
<collections::binary_heap::Iter<'_, T> as core::clone::Clone>::clone;false;false;true;false
collections::linked_list::Cursor::<'a, T, A>::move_next;false;true;true;false
collections::btree::node::NodeRef::<BorrowType, K, V, Type>::first_edge;false;true;true;false
collections::btree::navigate::<impl collections::btree::node::NodeRef<BorrowType, K, V, collections::btree::node::marker::LeafOrInternal>>::first_leaf_edge;false;false;true;true
<bstr::ByteString as core::cmp::PartialEq<&str>>::eq;false;false;true;false
collections::btree::map::entry::OccupiedEntry::<'a, K, V, A>::remove_entry;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::iter;false;false;true;false
<T as borrow::ToOwned>::clone_into;false;false;true;false
ffi::c_str::CString::_from_vec_with_nul_unchecked;true;false;true;false
vec::into_iter::IntoIter::<T, A>::into_vecdeque;false;true;true;false
collections::btree::set::BTreeSet::<T, A>::is_empty;false;false;true;false
<collections::btree::map::Keys<'a, K, V> as core::iter::Iterator>::min;false;false;true;false
boxed::convert::<impl core::convert::From<borrow::Cow<'b, str>> for boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync + 'a)>>::from;false;false;true;false
<boxed::Box<F, A> as core::ops::FnMut<Args>>::call_mut;false;true;true;false
rc::Rc::<T, A>::into_inner_with_allocator;false;true;true;false
raw_vec::alloc_guard;false;false;false;false
<vec::into_iter::IntoIter<T, A> as core::iter::Iterator>::__iterator_get_unchecked;true;true;true;false
collections::btree::remove::<impl collections::btree::node::Handle<collections::btree::node::NodeRef<collections::btree::node::marker::Mut<'a>, K, V, collections::btree::node::marker::Leaf>, collections::btree::node::marker::KV>>::remove_leaf_kv;false;true;true;false
vec::Vec::<T, A>::split_at_spare_mut_with_len;true;true;true;false
collections::btree::node::ForceResult::Leaf;false;false;false;false
collections::vec_deque::VecDeque::<T, A>::get_mut;false;true;true;false
collections::binary_heap::BinaryHeap::<T, A>::pop;false;false;true;false
task::local_raw_waker::drop_waker;true;true;true;false
<&&&&&&&str as string::SpecToString>::spec_to_string;false;false;false;false
<collections::vec_deque::into_iter::IntoIter<T, A> as core::iter::DoubleEndedIterator>::rfold;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::write_iter_wrapping;true;true;true;false
<boxed::Box<T, A> as core::fmt::Pointer>::fmt;false;true;true;false
<collections::btree::set::Range<'a, T> as core::fmt::Debug>::fmt;false;false;true;false
collections::linked_list::LinkedList::<T, A>::push_front_node;true;true;true;false
collections::btree::set::BTreeSet::<T, A>::entry;false;false;true;false
<boxed::Box<G, A> as core::ops::Coroutine<R>>::resume;false;true;true;false
boxed::Box::<T, A>::into_inner;false;true;false;false
<core::option::Option<bool> as vec::is_zero::IsZero>::is_zero;false;false;false;false
<bstr::ByteString as core::cmp::PartialEq<vec::Vec<u8>>>::eq;false;false;true;false
collections::btree::set::BTreeSet::<T, A>::append;false;false;true;false
bstr::<impl core::cmp::PartialEq<core::bstr::ByteStr> for vec::Vec<u8>>::eq;false;false;true;false
vec::Vec::<T, A>::dedup_by;false;true;true;true
<collections::linked_list::LinkedList<T, A> as core::fmt::Debug>::fmt;false;false;true;false
<rc::Rc<T, A> as core::fmt::Debug>::fmt;false;false;true;false
collections::btree::map::CursorMutKey::<'a, K, V, A>::next;false;true;true;false
<vec::Vec<T, A> as core::iter::Extend<T>>::extend;false;false;true;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<BorrowType, K, V, NodeType>, collections::btree::node::marker::KV>::right_edge;false;true;true;false
<&'a mut vec::Vec<T, A> as core::iter::IntoIterator>::into_iter;false;false;true;false
<collections::btree::map::BTreeMap<K, V, A> as core::ops::Index<&Q>>::index;false;false;true;false
<rc::Rc<[T], A> as core::convert::From<vec::Vec<T, A>>>::from;false;true;true;false
vec::set_len_on_drop::SetLenOnDrop::<'a>::increment_len;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::insert;false;true;true;false
<collections::btree::set::BTreeSet<T, A> as core::cmp::PartialEq>::eq;false;false;true;false
raw_vec::RawVecInner::<A>::from_nonnull_in;true;false;true;false
<boxed::thin::ThinBox<T> as core::error::Error>::source;false;false;true;false
<collections::btree::map::entry::OccupiedError<'a, K, V> as core::error::Error>::description;false;false;true;false
collections::btree::map::entry::Entry::<'a, K, V, A>::or_default;false;false;true;false
collections::linked_list::CursorMut::<'a, T, A>::as_list;false;false;true;false
collections::linked_list::assert_covariance;false;false;false;false
boxed::<impl core::ops::Coroutine<R> for core::pin::Pin<boxed::Box<G, A>>>::resume;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::abort_shrink;true;true;true;false
<&&&&&&&&&&&&str as string::SpecToString>::spec_to_string;false;false;false;false
<string::String as core::convert::TryFrom<vec::Vec<u8>>>::try_from;false;false;true;false
collections::btree::navigate::<impl collections::btree::node::NodeRef<collections::btree::node::marker::ValMut<'a>, K, V, collections::btree::node::marker::LeafOrInternal>>::range_search;false;true;true;false
<string::String as core::convert::From<&str>>::from;false;false;false;false
<rc::Rc<[T]>::from_iter_exact::Guard<T> as core::ops::Drop>::drop;false;true;true;false
boxed::thin::WithOpaqueHeader::new;false;false;false;false
raw_vec::RawVecInner::<A>::reserve::do_reserve_and_handle;false;false;true;false
boxed::Box::<[T]>::try_new_uninit_slice;false;true;false;false
collections::linked_list::CursorMut::<'a, T, A>::index;false;false;true;false
<u128 as vec::is_zero::IsZero>::is_zero;false;false;false;false
collections::btree::set::BTreeSet::<T, A>::intersection;false;false;true;false
<collections::btree::map::BTreeMap<K, V, A> as core::iter::Extend<(K, V)>>::extend;false;false;true;true
collections::btree::navigate::<impl collections::btree::node::NodeRef<collections::btree::node::marker::Immut<'a>, K, V, collections::btree::node::marker::LeafOrInternal>>::full_range;false;false;true;false
collections::linked_list::LinkedList::<T, A>::pop_front_node;false;false;true;false
collections::btree::map::BTreeMap::<K, V, A>::split_off;false;false;true;false
<collections::vec_deque::iter::Iter<'_, T> as core::clone::Clone>::clone;false;false;true;false
<[V] as slice::Join<&T>>::join;false;false;false;true
<rc::Weak<T, A> as core::clone::Clone>::clone;false;false;true;false
<string::String as core::iter::Extend<string::String>>::extend_one;false;false;true;false
collections::btree::node::NodeRef::<collections::btree::node::marker::Mut<'a>, K, V, collections::btree::node::marker::LeafOrInternal>::cast_to_leaf_unchecked;true;false;true;false
<core::option::Option<&T> as vec::is_zero::IsZero>::is_zero;false;false;false;false
bstr::<impl core::cmp::PartialEq<bstr::ByteString> for &core::bstr::ByteStr>::eq;false;false;true;false
raw_vec::min_non_zero_cap;false;false;false;false
<boxed::Box<T, A> as core::hash::Hasher>::write_i64;false;true;true;false
boxed::iter::<impl core::iter::FromIterator<string::String> for boxed::Box<str>>::from_iter;false;false;false;false
collections::btree::node::NodeRef::<BorrowType, K, V, collections::btree::node::marker::Internal>::as_internal_ptr;false;false;true;false
<collections::vec_deque::into_iter::IntoIter<T, A> as core::iter::DoubleEndedIterator>::try_rfold;false;false;true;false
<collections::btree::map::BTreeMap<K, V, A> as core::clone::Clone>::clone;false;false;true;false
<bstr::ByteString as core::borrow::BorrowMut<core::bstr::ByteStr>>::borrow_mut;false;false;true;false
raw_vec::RawVec::<T, A>::with_capacity_zeroed_in;false;false;false;false
<collections::vec_deque::VecDeque<T, A> as core::fmt::Debug>::fmt;false;false;true;false
rc::RcInnerPtr::inc_weak;false;true;false;false
string::<impl core::iter::FromIterator<&'b str> for borrow::Cow<'a, str>>::from_iter;false;false;false;false
<collections::btree::map::Values<'a, K, V> as core::iter::DoubleEndedIterator>::next_back;false;false;true;false
<vec::Vec<T, A> as core::ops::Deref>::deref;false;false;true;false
<collections::btree::map::entry::OccupiedEntry<'_, K, V, A> as core::fmt::Debug>::fmt;false;false;true;false
task::raw_waker::drop_waker;true;true;true;false
<boxed::Box<T, A> as core::convert::AsRef<T>>::as_ref;false;true;false;false
collections::btree::set::CursorMutKey::<'a, T, A>::as_cursor;false;false;true;false
"<rc::Rc<[T]> as core::convert::From<[T; N]>>::from";false;false;false;false
<bstr::ByteString as core::ops::IndexMut<core::ops::RangeToInclusive<usize>>>::index_mut;false;false;true;false
vec::Vec::<T, A>::swap_remove;false;true;true;false
sync::Arc::<T, A>::from_raw_in;true;true;true;false
<T as string::SpecToString>::spec_to_string;false;false;false;false
<boxed::Box<[T], A> as core::clone::Clone>::clone_from;false;true;true;false
collections::btree::fix::<impl collections::btree::node::NodeRef<collections::btree::node::marker::Owned, K, V, collections::btree::node::marker::LeafOrInternal>>::fix_right_border;false;false;true;false
<bstr::ByteString as core::hash::Hash>::hash;false;false;true;false
<rc::Rc<[T]> as rc::RcFromSlice<T>>::from_slice;false;true;false;false
collections::binary_heap::IntoIter::<T, A>::allocator;false;false;true;false
collections::btree::set::CursorMutKey::<'a, T, A>::next;false;false;true;false
sync::Arc::<T>::from_inner;true;true;true;false
collections::binary_heap::BinaryHeap::<T, A>::drain;false;false;true;false
boxed::thin::WithHeader::<H>::header;false;true;true;false
<vec::Vec<T, A> as vec::spec_extend::SpecExtend<&'a T, I>>::spec_extend;false;false;true;false
boxed::Box::<T, A>::new_uninit_in;false;false;false;false
<collections::btree::map::IntoIter<K, V, A> as core::ops::Drop>::drop;false;true;true;true
<collections::btree::map::IterMut<'_, K, V> as core::fmt::Debug>::fmt;false;false;true;false
<collections::vec_deque::VecDeque<T, A> as core::iter::Extend<T>>::extend_one;false;false;true;false
<&mut [u8] as ffi::c_str::CString::new::SpecNewImpl>::spec_new_impl;false;false;true;false
boxed::Box::<T>::new_zeroed;false;false;false;false
rc::Rc::<[T], A>::new_zeroed_slice_in;false;true;false;false
collections::binary_heap::BinaryHeap::<T, A>::into_vec;false;false;true;false
<rc::Rc<T, A> as rc::RcEqIdent<T, A>>::eq;false;false;true;false
<collections::TryReserveError as core::cmp::PartialEq>::eq;false;false;false;false
<rc::Rc<str> as core::convert::From<string::String>>::from;false;false;true;false
bstr::<impl core::convert::TryFrom<&'a core::bstr::ByteStr> for string::String>::try_from;false;false;false;false
<collections::binary_heap::IntoIter<T, A> as core::iter::SourceIter>::as_inner;true;false;true;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<collections::btree::node::marker::ValMut<'a>, K, V, NodeType>, collections::btree::node::marker::KV>::into_kv_valmut;false;true;true;false
collections::linked_list::CursorMut::<'a, T, A>::move_prev;false;true;true;false
<vec::into_iter::IntoIter<T, A> as core::iter::SourceIter>::as_inner;true;false;true;false
<core::option::Option<i8> as vec::is_zero::IsZero>::is_zero;false;false;false;false
"bstr::<impl core::cmp::PartialEq<bstr::ByteString> for [u8; N]>::eq";false;false;true;false
vec::Vec::<T, A>::retain;false;false;true;false
<&&&&&&&&&str as string::SpecToString>::spec_to_string;false;false;false;false
<collections::btree::set::BTreeSet<T, A> as core::clone::Clone>::clone_from;false;false;true;false
<collections::linked_list::Iter<'a, T> as core::iter::Iterator>::next;false;false;true;false
boxed::Box::<T, A>::as_ptr;false;false;false;false
<boxed::Box<I, A> as boxed::iter::BoxIter>::last;false;true;false;true
collections::btree::navigate::<impl collections::btree::node::NodeRef<BorrowType, K, V, collections::btree::node::marker::LeafOrInternal>>::lower_bound;false;false;true;true
<collections::btree::map::Keys<'a, K, V> as core::iter::Iterator>::next;false;false;true;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<collections::btree::node::marker::Dying, K, V, NodeType>, collections::btree::node::marker::KV>::drop_key_val;true;true;true;false
<collections::vec_deque::iter::Iter<'a, T> as core::iter::Iterator>::try_fold;false;false;true;true
collections::btree::set::Cursor::<'a, K>::next;false;false;true;false
boxed::convert::<impl boxed::Box<(dyn core::any::Any + core::marker::Send + core::marker::Sync + 'static), A>>::downcast_unchecked;true;true;false;false
collections::btree::navigate::<impl collections::btree::node::Handle<collections::btree::node::NodeRef<BorrowType, K, V, collections::btree::node::marker::Leaf>, collections::btree::node::marker::Edge>>::next_back_kv;false;false;true;true
string::<impl core::cmp::PartialEq<string::String> for &'a str>::eq;false;false;true;false
raw_vec::RawVec::<T, A>::allocator;false;false;true;false
collections::binary_heap::BinaryHeap::<T, A>::reserve;false;false;true;false
<collections::linked_list::CursorMut<'_, T, A> as core::fmt::Debug>::fmt;false;false;true;false
raw_vec::RawVecInner::<A>::try_with_capacity_in;false;false;false;false
collections::vec_deque::VecDeque::<T, A>::binary_search;false;false;true;false
ffi::c_str::CString::from_vec_unchecked;true;true;true;false
<[V] as slice::Join<&[T]>>::join;false;false;false;true
sync::Arc::<[T]>::into_array;false;true;true;false
<I as sync::ToArcSlice<T>>::to_arc_slice;false;true;false;false
<collections::btree::set::ExtractIf<'_, T, F, A> as core::fmt::Debug>::fmt;false;false;true;false
borrow::Cow::Borrowed;false;false;false;false
<string::String as core::convert::AsMut<str>>::as_mut;false;false;true;false
"boxed::convert::<impl core::convert::TryFrom<boxed::Box<[T]>> for boxed::Box<[T; N]>>::try_from";false;true;false;false
boxed::Box::<T>::new_uninit;false;false;false;false
slice::<impl [T]>::to_vec;false;false;false;false
boxed::Box::<[T]>::into_array;false;true;false;false
collections::btree::borrow::DormantMutRef::<'a, T>::new;false;true;true;false
collections::btree::node::NodeRef::<collections::btree::node::marker::Mut<'a>, K, V, collections::btree::node::marker::Internal>::edge_area_mut;true;true;true;false
<boxed::Box<T, A> as core::clone::Clone>::clone_from;false;true;true;false
collections::btree::set::BTreeSet::<T, A>::take;false;false;true;false
<bstr::ByteString as core::convert::From<&'a core::bstr::ByteStr>>::from;false;false;false;false
collections::linked_list::LinkedList::<T, A>::front;false;false;true;false
boxed::Box::<[T]>::try_new_zeroed_slice;false;true;false;false
<collections::btree::map::ValuesMut<'_, K, V> as core::iter::ExactSizeIterator>::len;false;false;true;false
<collections::linked_list::LinkedList<T, A> as core::cmp::PartialEq>::ne;false;false;true;false
<alloc::Global as core::alloc::Allocator>::allocate_zeroed;false;false;false;false
<collections::linked_list::Iter<'a, T> as core::iter::DoubleEndedIterator>::next_back;false;false;true;false
<rc::Weak<T> as core::default::Default>::default;false;false;false;false
<collections::binary_heap::IntoIterSorted<T, A> as core::fmt::Debug>::fmt;false;false;true;false
<vec::Vec<T> as core::iter::FromIterator<T>>::from_iter;false;false;false;false
<collections::vec_deque::VecDeque<T> as collections::vec_deque::spec_from_iter::SpecFromIter<T, I>>::spec_from_iter;false;false;false;false
<&&&str as string::SpecToString>::spec_to_string;false;false;false;false
raw_vec::RawVec::<T, A>::into_box;true;true;true;false
collections::btree::navigate::LazyLeafRange::<collections::btree::node::marker::Dying, K, V>::deallocating_next_unchecked;true;true;true;false
<collections::btree::set::ExtractIf<'_, T, F, A> as core::iter::Iterator>::next;false;false;true;false
<bstr::ByteString as core::ops::Deref>::deref;false;false;true;false
collections::binary_heap::BinaryHeap::<T, A>::rebuild_tail;false;true;true;true
collections::btree::set::BTreeSet::<T, A>::is_disjoint;false;false;true;false
<collections::binary_heap::DrainSorted<'_, T, A> as core::iter::Iterator>::next;false;false;true;false
string::String::into_chars;false;false;true;false
vec::in_place_collect::in_place_collectible;false;false;true;false
ffi::c_str::FromBytesWithNulErrorKind::InteriorNul;false;false;false;false
collections::linked_list::LinkedList::<T, A>::splice_nodes;true;true;true;false
<collections::vec_deque::into_iter::IntoIter<T, A> as core::iter::Iterator>::advance_by;false;false;true;false
ffi::c_str::IntoStringError::into_cstring;false;false;true;false
rc::UniqueRc::<T>::new;false;false;false;false
<bool as vec::is_zero::IsZero>::is_zero;false;false;false;false
string::String::extend_from_within;false;false;true;false
<bstr::ByteString as core::cmp::PartialEq<core::bstr::ByteStr>>::eq;false;false;true;false
<string::String as core::iter::Extend<&'a core::ascii::Char>>::extend_one;false;false;true;false
<collections::btree::set::IntoIter<T, A> as core::iter::Iterator>::next;false;false;true;false
collections::btree::map::BTreeMap::<K, V, A>::is_empty;false;false;true;false
collections::btree::set::entry::Entry::Occupied;false;false;true;false
<collections::btree::map::BTreeMap<K, V, A> as core::cmp::Ord>::cmp;false;false;true;false
<collections::btree::set::Difference<'a, T, A> as core::iter::Iterator>::min;false;false;true;false
<collections::vec_deque::VecDeque<T, A> as core::cmp::PartialEq<&mut [U]>>::eq;false;false;true;false
<collections::btree::node::Handle<collections::btree::node::NodeRef<collections::btree::node::marker::Dying, K, V, NodeType>, collections::btree::node::marker::KV>::drop_key_val::Dropper<'_, T> as core::ops::Drop>::drop;false;true;true;false
sync::Arc::<T, A>::into_raw_with_allocator;false;true;true;false
<collections::btree::map::BTreeMap<K, V, A> as core::fmt::Debug>::fmt;false;false;true;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<collections::btree::node::marker::Mut<'a>, K, V, NodeType>, collections::btree::node::marker::KV>::kv_mut;false;true;true;false
<collections::btree::set::Range<'a, T> as core::iter::Iterator>::next;false;false;true;false
<collections::btree::set::Range<'a, T> as core::iter::Iterator>::min;false;false;true;false
collections::btree::set::CursorMut::<'a, T, A>::peek_prev;false;false;true;false
<sync::Arc<[T]> as sync::ArcFromSlice<T>>::from_slice;false;true;false;false
<[T] as slice::SpecCloneIntoVec<T, A>>::clone_into;false;false;true;false
sync::Arc::<T, A>::is_unique;false;false;true;false
boxed::convert::<impl (dyn core::error::Error + core::marker::Send + core::marker::Sync + 'static)>::downcast;false;false;false;false
bstr::ByteString;false;false;true;false
<collections::linked_list::IterMut<'a, T> as core::iter::DoubleEndedIterator>::next_back;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::from_contiguous_raw_parts_in;true;true;true;false
<vec::drain::Drain<'a, T, A> as core::convert::AsRef<[T]>>::as_ref;false;false;true;false
vec::into_iter::IntoIter::<T, A>::allocator;false;false;true;false
rc::UniqueRcUninit::<T, A>::new;false;true;false;false
collections::btree::mem::take_mut;false;false;true;false
<<collections::vec_deque::drain::Drain<'_, T, A> as core::ops::Drop>::drop::DropGuard<'r, 'a, T, A> as core::ops::Drop>::drop::join_head_and_tail_wrapping;false;true;true;false
collections::binary_heap::Hole::<'a, T>::element;false;false;true;false
collections::btree::map::entry::OccupiedEntry::<'a, K, V, A>::into_mut;false;false;true;false
<collections::vec_deque::into_iter::IntoIter<T, A> as core::iter::DoubleEndedIterator>::advance_back_by;false;false;true;false
<collections::binary_heap::Hole<'_, T> as core::ops::Drop>::drop;false;true;true;false
string::String::try_reserve_exact;false;false;true;false
collections::btree::set::CursorMut::<'a, T, A>::remove_prev;false;false;true;false
<ffi::c_str::NulError as core::cmp::PartialEq>::eq;false;false;true;false
collections::btree::node::NodeRef::<BorrowType, K, V, Type>::first_kv;false;true;true;false
collections::linked_list::CursorMut::<'a, T>::splice_before;false;true;true;false
<T as slice::<impl [T]>::to_vec_in::ConvertVec>::to_vec;false;true;false;false
task::<impl core::convert::From<rc::Rc<W>> for core::task::LocalWaker>::from;false;true;true;false
collections::linked_list::CursorMut::<'a, T, A>::split_after;false;true;true;false
<collections::btree::map::Keys<'_, K, V> as core::iter::ExactSizeIterator>::len;false;false;true;false
<collections::vec_deque::iter_mut::IterMut<'a, T> as core::iter::Iterator>::__iterator_get_unchecked;true;true;true;false
<core::num::Saturating<T> as vec::is_zero::IsZero>::is_zero;false;false;true;false
vec::partial_eq::<impl core::cmp::PartialEq<vec::Vec<U, A2>> for vec::Vec<T, A1>>::ne;false;false;true;false
<collections::btree::map::Range<'_, K, V> as core::fmt::Debug>::fmt;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::shrink_to_fit;false;false;true;false
<collections::linked_list::Iter<'_, T> as core::default::Default>::default;false;false;false;false
collections::vec_deque::VecDeque::<T, A>::to_physical_idx;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::split_off;false;true;true;false
<boxed::Box<T, A> as core::fmt::Debug>::fmt;false;true;true;false
"<collections::vec_deque::VecDeque<T, A> as core::cmp::PartialEq<&mut [U; N]>>::eq";false;false;true;false
<collections::btree::set_val::SetValZST as core::cmp::Eq>::assert_receiver_is_total_eq;false;false;false;false
rc::Rc::<[T]>::into_array;false;true;true;false
string::String::from_utf8;false;false;true;false
str::from_boxed_utf8_unchecked;true;true;false;false
<bstr::ByteString as core::iter::FromIterator<&'a str>>::from_iter;false;false;false;true
collections::btree::map::BTreeMap::<K, V, A>::range_mut;false;false;true;false
<collections::vec_deque::VecDeque<T, A> as core::iter::Extend<&'a T>>::extend;false;false;true;false
boxed::Box::<T>::try_new_zeroed;false;false;false;false
string::String::from_raw_parts;true;true;true;false
string::FromUtf8Error::into_bytes;false;false;true;false
bstr::<impl core::cmp::PartialEq<bstr::ByteString> for borrow::Cow<'_, core::bstr::ByteStr>>::eq;false;false;true;false
<bstr::ByteString as core::cmp::PartialEq>::eq;false;false;true;false
<collections::btree::map::IntoValues<K, V, A> as core::iter::ExactSizeIterator>::len;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::wrap_sub;false;false;true;false
str::<impl core::borrow::Borrow<str> for string::String>::borrow;false;false;true;false
collections::btree::map::CursorMutKey::<'a, K, V, A>::insert_before;false;true;true;false
collections::vec_deque::VecDeque::<T, A>::reserve;false;true;true;false
"<rc::Rc<[T; N], A> as core::convert::TryFrom<rc::Rc<[T], A>>>::try_from";false;true;true;false
raw_vec::RawVec::<T, A>::try_reserve_exact;false;false;true;false
collections::btree::append::<impl collections::btree::node::NodeRef<collections::btree::node::marker::Owned, K, V, collections::btree::node::marker::LeafOrInternal>>::append_from_sorted_iters;false;false;true;false
<sync::Arc<T, A> as sync::ArcEqIdent<T, A>>::eq;false;false;true;false
<collections::btree::map::RangeMut<'a, K, V> as core::iter::DoubleEndedIterator>::next_back;false;false;true;false
collections::btree::navigate::LazyLeafRange::<BorrowType, K, V>::reborrow;false;false;true;false
collections::linked_list::LinkedList::<T, A>::split_off_before_node;true;true;true;false
<usize as vec::is_zero::IsZero>::is_zero;false;false;false;false
<collections::binary_heap::Iter<'a, T> as core::iter::Iterator>::size_hint;false;false;true;false
collections::btree::node::NodeRef::<collections::btree::node::marker::Owned, K, V, collections::btree::node::marker::LeafOrInternal>::clear_parent_link;false;false;true;false
<collections::vec_deque::iter::Iter<'a, T> as core::iter::DoubleEndedIterator>::rfold;false;false;true;false
<collections::linked_list::ExtractIf<'_, T, F, A> as core::iter::Iterator>::next;false;true;true;true
ffi::c_str::<impl core::ffi::CStr>::to_string_lossy;false;false;false;false
string::String::remove;false;true;true;false
collections::linked_list::CursorMut::<'a, T, A>::peek_prev;false;true;true;false
collections::vec_deque::VecDeque::<T, A>::back;false;false;true;false
string::<impl core::cmp::PartialEq<str> for borrow::Cow<'a, str>>::ne;false;false;true;false
<vec::into_iter::IntoIter<T> as vec::in_place_collect::AsVecIntoIter>::as_into_iter;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::buffer_range;true;true;true;false
ffi::c_str::<impl borrow::ToOwned for core::ffi::CStr>::to_owned;false;false;false;false
string::String::drain;false;true;true;false
<collections::btree::map::IterMut<'a, K, V> as core::iter::Iterator>::min;false;false;true;false
boxed::Box::<[T], A>::try_new_zeroed_slice_in;false;true;false;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<BorrowType, K, V, collections::btree::node::marker::Internal>, collections::btree::node::marker::Edge>::forget_node_type;false;true;true;false
vec::Vec::<T, A>::is_empty;false;false;true;false
<boxed::Box<T, A> as core::cmp::PartialOrd>::partial_cmp;false;true;false;false
ffi::c_str::IntoStringError::utf8_error;false;false;true;false
<collections::btree::merge_iter::Peeked<I> as core::clone::Clone>::clone;false;false;true;false
bstr::<impl core::cmp::PartialEq<vec::Vec<u8>> for core::bstr::ByteStr>::eq;false;false;true;false
<collections::vec_deque::VecDeque<T, A> as collections::vec_deque::spec_extend::SpecExtend<&'a T, I>>::spec_extend;false;false;true;false
bstr::<impl core::cmp::PartialEq<core::bstr::ByteStr> for string::String>::eq;false;false;true;false
<str as string::SpecToString>::spec_to_string;false;false;false;false
<collections::btree::map::IterMut<'a, K, V> as core::iter::Iterator>::next;false;true;true;false
collections::btree::set::BTreeSet::<T, A>::last;false;false;true;false
collections::btree::set::BTreeSet::<T, A>::upper_bound_mut;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::front;false;false;true;false
rc::Weak::<T, A>::into_raw_with_allocator;false;true;true;false
vec::Vec::<T, A>::as_slice;false;true;true;false
<vec::Vec<T, A>::retain_mut::BackshiftOnDrop<'_, T, A> as core::ops::Drop>::drop;false;true;true;false
collections::btree::remove::<impl collections::btree::node::Handle<collections::btree::node::NodeRef<collections::btree::node::marker::Mut<'a>, K, V, collections::btree::node::marker::Internal>, collections::btree::node::marker::KV>>::remove_internal_kv;false;true;true;false
rc::Weak::<T>::new;false;false;false;false
<collections::vec_deque::VecDeque<T, A>::shrink_to::Guard<'_, T, A> as core::ops::Drop>::drop;false;true;true;false
<string::String as core::ops::DerefMut>::deref_mut;false;false;true;false
<vec::Vec<T> as vec::spec_from_iter::SpecFromIter<T, I>>::from_iter;false;false;false;false
<string::String as core::cmp::Ord>::cmp;false;false;true;false
<T as slice::<impl [T]>::to_vec_in::ConvertVec>::to_vec;false;true;false;true
<collections::btree::map::BTreeMap<K, V> as core::default::Default>::default;false;false;false;false
boxed::thin::WithHeader;false;false;true;false
<collections::btree::map::Keys<'_, K, V> as core::fmt::Debug>::fmt;false;false;true;false
slice::<impl borrow::ToOwned for [T]>::clone_into;false;false;true;false
sync::Arc::<T, A>::pin_in;false;true;false;false
str::<impl str>::to_lowercase;false;false;false;true
collections::btree::map::BTreeMap::<K, V, A>::first_key_value;false;false;true;false
collections::btree::map::BTreeMap::<K, V, A>::extract_if;false;false;true;false
<rc::Rc<T, A> as core::clone::Clone>::clone;false;true;true;false
string::String::as_str;false;true;true;false
<collections::linked_list::Iter<'a, T> as core::iter::Iterator>::last;false;false;true;false
<collections::btree::set::IntoIter<T, A> as core::iter::DoubleEndedIterator>::next_back;false;false;true;false
<boxed::Box<T, A> as core::hash::Hasher>::write_isize;false;true;true;false
<collections::vec_deque::iter_mut::IterMut<'a, T> as core::iter::Iterator>::size_hint;false;false;true;false
<string::IntoChars as core::iter::Iterator>::count;false;false;true;true
string::<impl core::convert::From<&'a str> for borrow::Cow<'a, str>>::from;false;false;false;false
ffi::c_str::CString::from_vec_with_nul;false;true;true;false
<collections::btree::map::Iter<'_, K, V> as core::fmt::Debug>::fmt;false;false;true;false
collections::btree::node::NodeRef::<BorrowType, K, V, collections::btree::node::marker::Leaf>::forget_type;false;false;true;false
boxed::Box::<[T], A>::new_zeroed_slice_in;false;true;false;false
collections::btree::map::BTreeMap::<K, V, A>::range;false;false;true;false
<collections::binary_heap::IntoIter<I> as vec::in_place_collect::AsVecIntoIter>::as_into_iter;false;false;true;false
<collections::btree::merge_iter::MergeIterInner<I> as core::fmt::Debug>::fmt;false;false;true;false
<boxed::Box<F, A> as core::ops::AsyncFnMut<Args>>::async_call_mut;false;true;true;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<collections::btree::node::marker::Mut<'a>, K, V, NodeType>, collections::btree::node::marker::KV>::replace_kv;false;false;true;false
collections::btree::set::BTreeSet::<T, A>::len;false;false;true;false
<collections::vec_deque::VecDeque<T, A> as core::hash::Hash>::hash;false;false;true;true
<rc::UniqueRc<T, A> as core::convert::AsRef<T>>::as_ref;false;false;true;false
boxed::Box::<T, A>::try_new_zeroed_in;false;true;false;false
<rc::Rc<[T]> as core::convert::From<&mut [T]>>::from;false;false;true;false
<string::String as core::iter::FromIterator<&'a char>>::from_iter;false;false;false;false
<string::IntoChars as core::iter::Iterator>::size_hint;false;false;true;false
<collections::btree::map::UnorderedKeyError as core::fmt::Display>::fmt;false;false;true;false
vec::extract_if::ExtractIf::<'a, T, F, A>::allocator;false;false;true;false
<sync::Arc<T> as core::error::Error>::provide;false;false;true;false
collections::btree::fix::<impl collections::btree::node::NodeRef<collections::btree::node::marker::Owned, K, V, collections::btree::node::marker::LeafOrInternal>>::fix_top;false;false;true;true
collections::btree::set::BTreeSet::<T, A>::remove;false;false;true;false
"<collections::btree::set::BTreeSet<T> as core::convert::From<[T; N]>>::from";false;false;false;false
<collections::btree::navigate::LeafRange<B, K, V> as core::default::Default>::default;false;false;false;false
<ffi::c_str::IntoStringError as core::error::Error>::description;false;false;true;false
<string::String as core::fmt::Write>::write_char;false;false;true;false
sync::Weak::<T, A>::strong_count;false;false;true;false
sync::Weak::<T, A>::inner;false;true;true;false
boxed::thin::ThinBox::<Dyn>::new_unsize;false;false;false;false
collections::btree::map::BTreeMap::<K, V, A>::lower_bound;false;false;true;false
collections::btree::navigate::<impl collections::btree::node::NodeRef<collections::btree::node::marker::Dying, K, V, collections::btree::node::marker::LeafOrInternal>>::full_range;false;true;true;false
collections::linked_list::CursorMut::<'a, T, A>::move_next;false;true;true;false
<collections::linked_list::LinkedList<T, A> as core::cmp::PartialOrd>::partial_cmp;false;false;true;false
<collections::btree::map::Iter<'a, K, V> as core::iter::Iterator>::max;false;false;true;false
boxed::convert::<impl core::convert::From<borrow::Cow<'b, str>> for boxed::Box<(dyn core::error::Error + 'a)>>::from;false;false;true;false
<string::String as core::default::Default>::default;false;false;false;false
<&'a mut collections::linked_list::LinkedList<T, A> as core::iter::IntoIterator>::into_iter;false;false;true;false
<alloc::Global as core::alloc::Allocator>::grow_zeroed;true;true;true;false
<rc::Rc<T> as core::default::Default>::default;false;true;false;false
<string::String as core::iter::Extend<&'a str>>::extend;false;false;true;true
collections::btree::map::BTreeMap::<K, collections::btree::set_val::SetValZST, A>::get_or_insert_with;false;false;true;false
collections::btree::set::BTreeSet::<T, A>::first;false;false;true;false
<sync::Arc<T, A> as core::cmp::PartialEq>::ne;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::rotate_left_inner;true;true;true;false
sync::Arc::<(dyn core::any::Any + core::marker::Send + core::marker::Sync + 'static), A>::downcast_unchecked;true;true;true;false
boxed::thin::WithOpaqueHeader::try_new;false;false;false;false
boxed::Box::<T, A>::into_unique;false;true;false;false
<collections::binary_heap::BinaryHeap<T, A> as core::iter::Extend<&'a T>>::extend;false;false;true;false
collections::btree::node::NodeRef::<collections::btree::node::marker::Mut<'a>, K, V, collections::btree::node::marker::LeafOrInternal>::choose_parent_kv;false;true;true;false
<collections::btree::set::BTreeSet<T> as core::iter::FromIterator<T>>::from_iter;false;false;false;true
"boxed::convert::<impl core::convert::TryFrom<vec::Vec<T>> for boxed::Box<[T; N]>>::try_from";false;true;true;false
collections::btree::set::entry::VacantEntry::<'a, T, A>::insert;false;false;true;false
<vec::extract_if::ExtractIf<'_, T, F, A> as core::iter::Iterator>::size_hint;false;false;true;false
collections::btree::node::NodeRef::<collections::btree::node::marker::Mut<'a>, K, V, Type>::dormant;false;false;true;false
<collections::binary_heap::PeekMut<'_, T, A> as core::ops::Deref>::deref;false;true;true;false
collections::btree::node::slice_shl;true;true;true;false
boxed::convert::<impl core::convert::From<borrow::Cow<'_, [T]>> for boxed::Box<[T]>>::from;false;false;true;false
<collections::btree::set::CursorMut<'_, K, A> as core::fmt::Debug>::fmt;false;false;true;false
<core::option::Option<i64> as vec::is_zero::IsZero>::is_zero;false;false;false;false
<collections::vec_deque::VecDeque<T, A> as core::iter::Extend<&'a T>>::extend_reserve;false;false;true;false
vec::partial_eq::<impl core::cmp::PartialEq<vec::Vec<U, A2>> for vec::Vec<T, A1>>::eq;false;false;true;false
collections::btree::search::<impl collections::btree::node::NodeRef<BorrowType, K, V, Type>>::search_node;false;true;true;false
<ffi::c_str::FromVecWithNulError as core::fmt::Debug>::fmt;false;false;true;false
<string::FromUtf8Error as core::fmt::Display>::fmt;false;false;true;false
<string::IntoChars as core::iter::Iterator>::last;false;false;true;false
<collections::btree::map::IterMut<'a, K, V> as core::iter::Iterator>::last;false;false;true;false
collections::btree::node::BalancingContext::<'a, K, V>::can_merge;false;false;true;false
boxed::thin::WithHeader::<H>::drop;true;true;true;false
<collections::TryReserveErrorKind as core::fmt::Debug>::fmt;false;false;true;false
<borrow::Cow<'a, B> as core::borrow::Borrow<B>>::borrow;false;false;true;false
collections::linked_list::LinkedList::<T, A>::back;false;false;true;false
<collections::btree::set::SymmetricDifference<'a, T> as core::iter::Iterator>::min;false;false;true;false
<collections::linked_list::Cursor<'_, T, A> as core::clone::Clone>::clone;false;false;true;false
ffi::c_str::CString::into_inner;false;true;false;false
collections::btree::map::Cursor::<'a, K, V>::peek_prev;false;false;true;false
<string::String as core::cmp::PartialEq<&'a str>>::eq;false;false;true;false
vec::into_iter::IntoIter::<T, A>::as_slice;false;true;true;false
collections::btree::search::SearchResult::Found;false;false;true;false
collections::btree::set::CursorMutKey::<'a, T, A>::remove_prev;false;false;true;false
slice::<impl [T]>::sort_by_cached_key;false;false;true;true
sync::data_offset_align;false;false;false;false
ffi::c_str::CString::into_bytes_with_nul;false;false;false;false
<collections::btree::set::Intersection<'a, T, A> as core::iter::Iterator>::next;false;false;true;true
collections::linked_list::CursorMut::<'a, T, A>::insert_after;false;true;true;false
<borrow::Cow<'a, str> as core::ops::AddAssign>::add_assign;false;false;true;false
collections::btree::navigate::<impl collections::btree::node::Handle<collections::btree::node::NodeRef<collections::btree::node::marker::ValMut<'a>, K, V, collections::btree::node::marker::Leaf>, collections::btree::node::marker::Edge>>::next_back_unchecked;true;false;true;false
collections::btree::node::NodeRef::<collections::btree::node::marker::Immut<'a>, K, V, Type>::keys;false;true;true;false
collections::linked_list::CursorMut::<'a, T, A>::peek_next;false;true;true;false
collections::btree::node::NodeRef::<collections::btree::node::marker::Mut<'a>, K, V, Type>::key_area_mut;true;true;true;false
<boxed::Box<I, A> as boxed::iter::BoxIter>::last;false;false;false;true
<bstr::ByteString as core::cmp::PartialEq<&core::bstr::ByteStr>>::eq;false;false;true;false
rc::Rc::<T, A>::get_mut;false;true;true;false
boxed::convert::<impl (dyn core::error::Error + core::marker::Send + 'static)>::downcast;false;false;false;false
collections::btree::map::BTreeMap::<K, V, A>::clear;false;false;true;false
<collections::btree::map::ValuesMut<'_, K, V> as core::fmt::Debug>::fmt;false;false;true;false
collections::btree::search::<impl collections::btree::node::NodeRef<BorrowType, K, V, collections::btree::node::marker::LeafOrInternal>>::find_lower_bound_edge;false;true;true;false
<vec::Vec<T, A> as core::iter::Extend<&'a T>>::extend;false;false;true;false
string::String::leak;false;true;true;false
vec::Vec::<T, A>::insert::assert_failed;false;false;false;false
collections::linked_list::LinkedList::<T, A>::is_empty;false;false;true;false
rc::UniqueRc::<T, A>::downgrade;false;true;true;false
collections::btree::navigate::LazyLeafRange::<collections::btree::node::marker::ValMut<'a>, K, V>::next_unchecked;true;true;true;false
<string::IntoChars as core::iter::DoubleEndedIterator>::next_back;false;false;true;false
collections::btree::fix::<impl collections::btree::node::NodeRef<collections::btree::node::marker::Mut<'a>, K, V, collections::btree::node::marker::LeafOrInternal>>::fix_node_and_affected_ancestors;false;false;true;true
slice::<impl [T]>::repeat;false;true;false;true
<boxed::Box<T, A> as core::cmp::Ord>::cmp;false;true;false;false
<collections::btree::map::Cursor<'_, K, V> as core::clone::Clone>::clone;false;false;true;false
<collections::btree::map::UnorderedKeyError as core::clone::Clone>::clone;false;false;false;false
<collections::linked_list::IterMut<'_, T> as core::fmt::Debug>::fmt;false;false;true;false
sync::Arc::<T, A>::increment_strong_count_in;true;true;true;false
bstr::<impl core::cmp::PartialEq<bstr::ByteString> for &str>::eq;false;false;true;false
bstr::<impl core::cmp::PartialEq<borrow::Cow<'a, [u8]>> for &'a core::bstr::ByteStr>::eq;false;false;true;false
bstr::<impl core::cmp::PartialEq<bstr::ByteString> for vec::Vec<u8>>::eq;false;false;true;false
<collections::linked_list::LinkedList<T> as core::iter::FromIterator<T>>::from_iter;false;false;false;false
<core::num::Wrapping<T> as vec::is_zero::IsZero>::is_zero;false;false;true;false
borrow::Cow::Owned;false;false;false;false
collections::btree::navigate::LeafRange::<BorrowType, K, V>::reborrow;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::contains;false;false;true;false
<string::String as core::cmp::PartialEq<borrow::Cow<'a, str>>>::ne;false;false;true;false
<alloc::Global as core::alloc::Allocator>::shrink;true;true;true;false
collections::vec_deque::VecDeque::<T>::try_with_capacity;false;false;false;false
vec::Vec::<T, A>::pop;false;true;true;false
<collections::btree::map::entry::OccupiedError<'_, K, V, A> as core::fmt::Debug>::fmt;false;false;true;false
collections::binary_heap::PeekMut::<'a, T, A>::pop;false;true;true;false
collections::btree::node::NodeRef::<collections::btree::node::marker::Mut<'a>, K, V, Type>::len_mut;false;false;true;false
collections::btree::node::NodeRef::<BorrowType, K, V, collections::btree::node::marker::Internal>::from_internal;false;false;true;false
bstr::<impl core::convert::From<&'a bstr::ByteString> for borrow::Cow<'a, core::bstr::ByteStr>>::from;false;false;true;false
collections::binary_heap::BinaryHeap::<T, A>::into_sorted_vec;false;true;true;true
string::String::push;false;false;true;false
<boxed::Box<T, A> as core::hash::Hasher>::write_str;false;true;true;false
<bstr::ByteString as core::fmt::Debug>::fmt;false;false;true;false
collections::btree::navigate::LeafRange::<BorrowType, K, V>::none;false;false;false;false
<collections::btree::set::IntersectionInner<'_, T, A> as core::fmt::Debug>::fmt;false;false;true;false
collections::btree::set::BTreeSet::<T, A>::contains;false;false;true;false
<collections::btree::set::BTreeSet<T, A> as core::iter::Extend<&'a T>>::extend_one;false;false;true;false
<ffi::c_str::FromVecWithNulError as core::cmp::Eq>::assert_receiver_is_total_eq;false;false;true;false
sync::Arc::<[T]>::new_zeroed_slice;false;true;false;false
collections::vec_deque::VecDeque::<T, A>::truncate::Dropper;false;false;true;false
<vec::Vec<T, A> as core::fmt::Debug>::fmt;false;false;true;false
sync::UniqueArcUninit::<T, A>::into_arc;true;true;true;false
sync::Arc::<T>::new;false;true;false;false
<sync::Arc<T, A> as sync::ArcEqIdent<T, A>>::ne;false;false;true;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<BorrowType, K, V, collections::btree::node::marker::Leaf>, collections::btree::node::marker::KV>::forget_node_type;false;true;true;false
raw_vec::RawVecInner::<A>::reserve;false;false;true;false
<collections::btree::map::IntoKeys<K, V, A> as core::iter::Iterator>::max;false;false;true;false
<bstr::ByteString as core::cmp::PartialEq<[u8]>>::eq;false;false;true;false
collections::btree::node::NodeRef::<collections::btree::node::marker::Mut<'a>, K, V, collections::btree::node::marker::LeafOrInternal>::cast_to_internal_unchecked;true;false;true;false
collections::linked_list::Cursor::<'a, T, A>::move_prev;false;true;true;false
rc::Rc::<T, A>::try_new_zeroed_in;false;true;false;false
<collections::btree::set::Difference<'a, T, A> as core::iter::Iterator>::next;false;false;true;true
<rc::UniqueRc<T, A> as core::ops::Deref>::deref;false;true;true;false
collections::vec_deque::VecDeque::<T, A>::write_iter;true;false;true;true
vec::Vec::<T, A>::as_mut_ptr;false;false;true;false
collections::btree::node::BalancingContext::<'a, K, V>::into_left_child;false;false;true;false
<ffi::c_str::CString as core::clone::Clone>::clone;false;false;false;false
collections::vec_deque::VecDeque::<T, A>::rotate_right;false;true;true;false
collections::btree::map::ExtractIfInner::<'a, K, V>::peek;false;false;true;false
collections::btree::navigate::LazyLeafRange::<collections::btree::node::marker::Dying, K, V>::take_front;false;false;true;false
collections::btree::map::BTreeMap::<K, V, A>::first_entry;false;false;true;false
collections::btree::set::entry::Entry::<'a, T, A>::or_insert;false;false;true;false
<borrow::Cow<'a, B> as core::cmp::PartialEq<borrow::Cow<'b, C>>>::eq;false;false;true;false
<collections::binary_heap::IntoIter<T, A> as core::iter::DoubleEndedIterator>::next_back;false;false;true;false
<<collections::binary_heap::DrainSorted<'a, T, A> as core::ops::Drop>::drop::DropGuard<'r, 'a, T, A> as core::ops::Drop>::drop;false;false;true;true
collections::btree::node::Handle::<collections::btree::node::NodeRef<collections::btree::node::marker::Mut<'a>, K, V, NodeType>, HandleType>::reborrow_mut;true;true;true;false
boxed::Box::<core::mem::MaybeUninit<T>, A>::assume_init;true;true;false;false
<bstr::ByteString as core::convert::AsMut<[u8]>>::as_mut;false;false;true;false
rc::Weak::<T, A>::into_raw;false;false;true;false
<sync::Arc<[T]>::from_iter_exact::Guard<T> as core::ops::Drop>::drop;false;true;true;false
<(G, H) as vec::is_zero::IsZero>::is_zero;false;false;false;false
<sync::Arc<core::ffi::CStr> as core::default::Default>::default;false;true;false;false
<collections::btree::map::IntoIter<K, V, A> as core::iter::ExactSizeIterator>::len;false;false;true;false
<bstr::ByteString as core::iter::FromIterator<bstr::ByteString>>::from_iter;false;false;false;true
collections::btree::set::BTreeSet::<T, A>::insert;false;false;true;false
<collections::linked_list::IterMut<'_, T> as core::default::Default>::default;false;false;false;false
<collections::btree::map::BTreeMap<K, V, A> as core::cmp::PartialOrd>::partial_cmp;false;false;true;false
vec::into_iter::IntoIter::<T, A>::as_raw_mut_slice;false;false;true;false
<vec::into_iter::IntoIter<T, A> as core::fmt::Debug>::fmt;false;false;true;false
<string::String as core::iter::Extend<&'a char>>::extend_reserve;false;false;true;false
<borrow::Cow<'_, B> as core::ops::Deref>::deref;false;false;true;false
collections::btree::map::BTreeMap::<K, V, A>::last_key_value;false;false;true;false
<collections::btree::map::IntoKeys<K, V, A> as core::default::Default>::default;false;false;false;false
<collections::linked_list::LinkedList<<I as core::iter::IntoIterator>::Item, A> as collections::SpecExtend<I>>::spec_extend;false;false;true;true
<sync::Arc<T, A> as core::clone::Clone>::clone;false;true;true;false
collections::binary_heap::BinaryHeap::<T, A>::push;false;true;true;false
<collections::vec_deque::drain::Drain<'_, T, A> as core::ops::Drop>::drop::DropGuard;false;false;true;false
<bstr::ByteString as core::cmp::PartialEq<borrow::Cow<'_, core::bstr::ByteStr>>>::eq;false;false;true;false
<collections::vec_deque::into_iter::IntoIter<T, A> as core::iter::Iterator>::fold;false;false;true;true
collections::linked_list::LinkedList::<T, A>::contains;false;false;true;true
<bstr::ByteString as core::ops::IndexMut<core::ops::RangeInclusive<usize>>>::index_mut;false;false;true;false
<string::String as core::cmp::PartialEq<str>>::ne;false;false;true;false
<collections::binary_heap::BinaryHeap<T, A> as core::clone::Clone>::clone;false;false;true;false
<string::String as core::cmp::PartialEq<str>>::eq;false;false;true;false
<I as vec::in_place_collect::SpecInPlaceCollect<T, I>>::collect_in_place;true;true;true;true
<collections::btree::map::Values<'_, K, V> as core::fmt::Debug>::fmt;false;false;true;false
vec::partial_eq::<impl core::cmp::PartialEq<vec::Vec<U, A>> for &[T]>::eq;false;false;true;false
<borrow::Cow<'_, B> as core::hash::Hash>::hash;false;false;true;false
<rc::Rc<[T]> as core::default::Default>::default;false;false;false;false
vec::Vec::<T, A>::dedup_by_key;false;false;true;false
<ffi::c_str::FromBytesWithNulErrorKind as core::clone::Clone>::clone;false;false;false;false
sync::Arc::<T, A>::new_uninit_in;false;true;false;false
<rc::WeakInner<'a> as rc::RcInnerPtr>::weak_ref;false;false;true;false
boxed::thin::ThinBox::<T>::try_new;false;false;false;false
<rc::Rc<T, A> as core::fmt::Display>::fmt;false;false;true;false
<collections::vec_deque::VecDeque<T, A> as core::ops::Index<usize>>::index;false;false;true;false
slice::<impl [T]>::connect;false;false;false;false
collections::linked_list::LinkedList::<T, A>::split_off_after_node;true;true;true;false
<collections::btree::map::Iter<'a, K, V> as core::iter::Iterator>::next;false;true;true;false
<borrow::Cow<'_, B> as core::clone::Clone>::clone;false;false;true;false
<&'a collections::binary_heap::BinaryHeap<T, A> as core::iter::IntoIterator>::into_iter;false;false;true;false
<string::String as core::iter::Extend<borrow::Cow<'a, str>>>::extend_one;false;false;true;false
vec::Vec::<T, A>::extract_if;false;false;true;false
<core::option::Option<u8> as vec::is_zero::IsZero>::is_zero;false;false;false;false
bstr::<impl core::cmp::PartialOrd<bstr::ByteString> for core::bstr::ByteStr>::partial_cmp;false;false;true;false
raw_vec::RawVecInner::<A>::with_capacity_in;false;true;false;false
collections::btree::fix::<impl collections::btree::node::Handle<collections::btree::node::NodeRef<collections::btree::node::marker::Mut<'a>, K, V, collections::btree::node::marker::LeafOrInternal>, collections::btree::node::marker::KV>>::fix_left_border_of_left_edge;false;false;true;true
collections::btree::map::IntoIter::<K, V, A>::dying_next;false;true;true;false
<string::String as core::iter::Extend<char>>::extend_reserve;false;false;true;false
sync::Arc::<T>::pin;false;true;false;false
<bstr::ByteString as core::cmp::PartialOrd<&core::bstr::ByteStr>>::partial_cmp;false;false;true;false
<bstr::ByteString as core::cmp::PartialOrd<core::bstr::ByteStr>>::partial_cmp;false;false;true;false
<boxed::Box<F, A> as core::ops::Fn<Args>>::call;false;true;false;false
bstr::<impl core::convert::TryFrom<&'a bstr::ByteString> for &'a str>::try_from;false;false;true;false
ffi::c_str::CString::_from_vec_unchecked;true;false;true;false
sync::Arc::<T, A>::try_unwrap;false;true;true;false
collections::btree::node::SplitResult::<'a, K, V, collections::btree::node::marker::Internal>::forget_node_type;false;false;true;false
collections::vec_deque::drain::Drain::<'a, T, A>::new;true;false;true;false
rc::Weak::<T, A>::weak_count;false;false;true;false
string::String::from_utf8_lossy_owned;false;true;true;false
slice::<impl [T]>::concat;false;false;false;false
collections::vec_deque::into_iter::IntoIter::<T, A>::new;false;false;true;false
<collections::btree::set::BTreeSet<T, A> as core::iter::Extend<T>>::extend_one;false;false;true;false
<collections::btree::map::Range<'_, K, V> as core::clone::Clone>::clone;false;false;true;false
rc::Rc::<[core::mem::MaybeUninit<T>], A>::assume_init;true;true;true;false
task::raw_waker;false;false;true;false
"vec::Vec::<[T; N], A>::into_flattened";false;true;true;false
slice::<impl [T]>::sort;false;false;true;false
<vec::drain::Drain<'_, T, A> as core::ops::Drop>::drop;false;true;true;false
boxed::convert::boxed_slice_as_array_unchecked;true;true;false;false
<bstr::ByteString as core::str::FromStr>::from_str;false;false;false;false
boxed::iter::<impl core::iter::Iterator for boxed::Box<I, A>>::size_hint;false;true;false;false
collections::btree::set::CursorMut::<'a, T, A>::with_mutable_key;true;true;true;false
str::<impl borrow::ToOwned for str>::to_owned;false;true;false;false
collections::vec_deque::iter_mut::IterMut::<'a, T>::as_slices;false;false;true;false
<collections::btree::set::Difference<'a, T, A> as core::iter::Iterator>::size_hint;false;false;true;false
<collections::binary_heap::BinaryHeap<T, A> as core::iter::IntoIterator>::into_iter;false;false;true;false
<collections::vec_deque::iter_mut::IterMut<'a, T> as core::iter::Iterator>::advance_by;false;false;true;true
<bstr::ByteString as core::cmp::PartialEq<borrow::Cow<'_, str>>>::eq;false;false;true;false
string::String::retain;false;true;true;true
collections::btree::set::CursorMut::<'a, T, A>::as_cursor;false;false;true;false
<u16 as vec::is_zero::IsZero>::is_zero;false;false;false;false
vec::Vec::<T, A>::into_boxed_slice;false;true;true;false
<collections::TryReserveError as core::fmt::Debug>::fmt;false;false;true;false
<boxed::Box<T, A> as core::hash::Hasher>::write_usize;false;true;true;false
sync::arcinner_layout_for_value_layout;false;false;false;false
vec::Vec::<T, A>::into_raw_parts;false;false;true;false
<collections::btree::map::IterMut<'a, K, V> as core::iter::DoubleEndedIterator>::next_back;false;true;true;false
<vec::Vec<T, A> as core::iter::Extend<T>>::extend_one_unchecked;true;true;true;false
collections::btree::set::BTreeSet::<T, A>::upper_bound;false;false;true;false
<collections::btree::set::Range<'a, T> as core::iter::Iterator>::last;false;false;true;false
<collections::vec_deque::iter::Iter<'a, T> as core::iter::DoubleEndedIterator>::next_back;false;false;true;false
vec::Vec::<T, A>::spare_capacity_mut;false;true;true;false
vec::cow::<impl core::convert::From<&'a vec::Vec<T>> for borrow::Cow<'a, [T]>>::from;false;false;true;false
boxed::iter::<impl core::iter::FromIterator<boxed::Box<str, A>> for boxed::Box<str>>::from_iter;false;false;false;false
ffi::c_str::<impl core::convert::From<ffi::c_str::CString> for sync::Arc<core::ffi::CStr>>::from;false;true;false;false
string::String::insert_bytes;true;true;true;false
vec::Vec::<T>::with_capacity;false;false;false;false
boxed::iter::<impl core::iter::IntoIterator for &'a boxed::Box<[I], A>>::into_iter;false;true;false;false
<collections::btree::set::BTreeSet<T> as core::default::Default>::default;false;false;false;false
<collections::binary_heap::Iter<'_, T> as core::iter::ExactSizeIterator>::is_empty;false;false;true;false
collections::linked_list::Cursor::<'a, T, A>::current;false;false;true;false
<(H,) as vec::is_zero::IsZero>::is_zero;false;false;false;false
<boxed::Box<[T], A> as core::clone::Clone>::clone;false;true;false;false
sync::Arc::<[T]>::copy_from_slice;true;true;false;false
collections::btree::set::Cursor::<'a, K>::peek_prev;false;false;true;false
bstr::ByteString::as_mut_bytestr;false;false;true;false
boxed::thin::WithHeader::<H>::new;false;true;false;false
vec::Vec::<T, A>::reserve;false;false;true;false
<string::String as core::ops::Deref>::deref;false;false;true;false
borrow::Cow::<'_, B>::is_borrowed;false;false;true;false
<collections::btree::map::Range<'a, K, V> as core::iter::Iterator>::next;false;false;true;false
collections::binary_heap::BinaryHeap::<T, A>::into_iter_sorted;false;false;true;false
<sync::Weak<T> as core::default::Default>::default;false;false;false;false
rc::Rc::<T>::try_allocate_for_layout;true;true;false;false
collections::btree::navigate::LeafRange::<collections::btree::node::marker::Immut<'a>, K, V>::next_back_checked;false;false;true;false
<rc::UniqueRc<T, A> as core::cmp::PartialEq>::ne;false;false;true;false
collections::btree::search::SearchBound::Excluded;false;false;false;false
collections::btree::map::BTreeMap::<K, V, A>::len;false;false;true;false
sync::Arc::<T>::increment_strong_count;true;true;true;false
ffi::c_str::<impl core::convert::From<&core::ffi::CStr> for sync::Arc<core::ffi::CStr>>::from;false;true;false;false
collections::btree::map::BTreeMap::<K, V, A>::retain;false;false;true;true
string::String::replace_range;false;true;true;false
<bstr::ByteString as core::fmt::Display>::fmt;false;false;true;false
collections::binary_heap::BinaryHeap::<T, A>::shrink_to;false;false;true;false
collections::btree::set::entry::VacantEntry::<'a, T, A>::into_value;false;false;true;false
<collections::btree::set::Iter<'a, T> as core::iter::Iterator>::size_hint;false;false;true;false
<string::String as core::iter::Extend<&'a core::ascii::Char>>::extend;false;false;true;false
<core::option::Option<i32> as vec::is_zero::IsZero>::is_zero;false;false;false;false
raw_vec::RawVecInner::<A>::allocator;false;false;true;false
<collections::btree::set::Intersection<'_, T, A> as core::clone::Clone>::clone;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::reserve_exact;false;true;true;false
<rc::Rc<T, A> as core::borrow::Borrow<T>>::borrow;false;false;true;false
<ffi::c_str::FromBytesWithNulErrorKind as core::cmp::PartialEq>::eq;false;false;false;false
<rc::UniqueRc<T, A> as core::fmt::Debug>::fmt;false;false;true;false
<string::FromUtf8Error as core::clone::Clone>::clone;false;false;true;false
<vec::set_len_on_drop::SetLenOnDrop<'_> as core::ops::Drop>::drop;false;false;true;false
collections::linked_list::LinkedList::<T, A>::front_mut;false;false;true;false
vec::Vec::<T, A>::splice;false;false;true;false
string::<impl core::cmp::PartialEq<string::String> for borrow::Cow<'a, str>>::ne;false;false;true;false
<sync::Arc<T> as core::error::Error>::description;false;false;true;false
collections::linked_list::Cursor::<'a, T, A>::peek_next;false;true;true;false
sync::Arc::<T, A>::as_ptr;false;true;true;false
collections::btree::map::BTreeMap::<K, V, A>::lower_bound_mut;false;false;true;false
bstr::<impl core::cmp::PartialEq<&'a core::bstr::ByteStr> for borrow::Cow<'a, [u8]>>::eq;false;false;true;false
collections::btree::map::BTreeMap::<K, V, A>::values_mut;false;false;true;false
str::<impl str>::to_ascii_uppercase;false;false;false;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<collections::btree::node::marker::Mut<'a>, K, V, NodeType>, collections::btree::node::marker::KV>::split_leaf_data;false;true;true;false
rc::RcInnerPtr::weak;false;false;false;false
boxed::convert::<impl core::convert::From<borrow::Cow<'_, str>> for boxed::Box<str>>::from;false;false;true;false
collections::linked_list::CursorMut::<'a, T, A>::remove_current;false;true;true;false
vec::in_place_collect::write_in_place_with_drop;false;false;true;false
<boxed::Box<E> as core::error::Error>::description;false;true;false;false
<collections::btree::set::Intersection<'_, T, A> as core::fmt::Debug>::fmt;false;false;true;false
collections::btree::node::BalancingContext::<'a, K, V>::bulk_steal_left;false;true;true;false
raw_vec::RawVec::<T>::new;false;false;false;false
collections::btree::node::NodeRef::<collections::btree::node::marker::Immut<'a>, K, V, Type>::into_leaf;false;true;true;false
<collections::vec_deque::drain::Drain<'_, T, A> as core::fmt::Debug>::fmt;false;false;true;false
collections::btree::navigate::<impl collections::btree::node::NodeRef<BorrowType, K, V, collections::btree::node::marker::LeafOrInternal>>::upper_bound;false;false;true;true
<collections::vec_deque::VecDeque<T, A> as core::iter::IntoIterator>::into_iter;false;false;true;false
<collections::btree::map::entry::VacantEntry<'_, K, V, A> as core::fmt::Debug>::fmt;false;false;true;false
ffi::c_str::CString::as_bytes_with_nul;false;true;false;false
string::String::from_utf16;false;false;false;true
"<collections::vec_deque::VecDeque<T> as core::convert::From<[T; N]>>::from";false;true;false;false
<vec::extract_if::ExtractIf<'a, T, F, A> as core::fmt::Debug>::fmt;false;false;true;false
alloc::handle_alloc_error::ct_error;false;false;false;false
collections::btree::node::NodeRef::<collections::btree::node::marker::Owned, K, V, collections::btree::node::marker::Leaf>::from_new_leaf;false;false;true;false
collections::linked_list::LinkedList::<T, A>::cursor_front;false;false;true;false
slice::<impl [T]>::into_vec;false;true;false;false
vec::Vec::<T, A>::new_in;false;false;false;false
<string::Drain<'_> as core::ops::Drop>::drop;false;true;true;false
<borrow::Cow<'_, B> as core::cmp::Ord>::cmp;false;false;true;false
<string::String as core::cmp::Eq>::assert_receiver_is_total_eq;false;false;true;false
<sync::Arc<str> as core::convert::From<string::String>>::from;false;false;true;false
collections::btree::node::slice_shr;true;true;true;false
boxed::convert::<impl core::convert::From<boxed::Box<str, A>> for boxed::Box<[u8], A>>::from;false;true;false;false
collections::linked_list::LinkedList::<T, A>::new_in;false;false;false;false
<collections::btree::set_val::SetValZST as core::fmt::Debug>::fmt;false;false;true;false
collections::linked_list::CursorMut::<'a, T, A>::pop_back;false;false;true;false
<collections::vec_deque::iter::Iter<'a, T> as core::iter::Iterator>::last;false;false;true;false
<boxed::Box<T, A> as core::hash::Hasher>::write_i32;false;true;true;false
<collections::linked_list::LinkedList<T, A> as core::iter::Extend<&'a T>>::extend_one;false;false;true;false
<collections::vec_deque::VecDeque<T, A> as collections::vec_deque::spec_extend::SpecExtend<T, I>>::spec_extend;false;true;true;true
ffi::c_str::<impl core::convert::From<&mut core::ffi::CStr> for rc::Rc<core::ffi::CStr>>::from;false;false;true;false
<ffi::c_str::IntoStringError as core::fmt::Display>::fmt;false;false;true;false
collections::btree::node::NodeRef::<collections::btree::node::marker::Dying, K, V, Type>::as_leaf_dying;false;true;true;false
sync::data_offset;true;true;true;false
<vec::into_iter::IntoIter<T, A> as core::ops::Drop>::drop;false;true;true;false
<boxed::Box<E> as core::error::Error>::cause;false;true;false;false
collections::btree::append::MergeIter;false;false;true;false
bstr::<impl core::convert::TryFrom<bstr::ByteString> for string::String>::try_from;false;false;true;false
<vec::into_iter::IntoIter<T, A> as core::iter::ExactSizeIterator>::is_empty;false;true;true;false
<collections::binary_heap::Iter<'a, T> as core::iter::Iterator>::next;false;false;true;false
<collections::vec_deque::VecDeque<T> as collections::vec_deque::spec_from_iter::SpecFromIter<T, vec::into_iter::IntoIter<T>>>::spec_from_iter;false;false;true;false
<vec::into_iter::IntoIter<T, A> as core::iter::Iterator>::size_hint;false;true;true;false
<i8 as vec::spec_from_elem::SpecFromElem>::from_elem;false;true;false;false
<vec::Vec<T, A> as vec::spec_extend::SpecExtend<&'a T, core::slice::Iter<'a, T>>>::spec_extend;false;true;true;false
collections::vec_deque::iter_mut::IterMut::<'a, T>::new;false;false;true;false
vec::splice::<impl vec::drain::Drain<'_, T, A>>::fill;true;true;true;true
sync::Arc::<T, A>::try_new_uninit_in;false;true;false;false
collections::linked_list::LinkedList::<T>::append;false;true;true;false
collections::linked_list::CursorMut::<'a, T, A>::front;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::back_mut;false;false;true;false
collections::btree::node::NodeRef::<BorrowType, K, V, Type>::as_leaf_ptr;false;false;true;false
boxed::convert::<impl boxed::Box<(dyn core::any::Any + core::marker::Send + core::marker::Sync + 'static), A>>::downcast;false;true;false;false
collections::btree::node::NodeRef::<BorrowType, K, V, Type>::last_edge;false;true;true;false
rc::Rc::<T>::new_zeroed;false;true;false;false
boxed::Box::<T, A>::into_non_null;false;true;false;false
rc::Rc::<T>::increment_strong_count;true;true;true;false
collections::btree::map::CursorMutKey::<'a, K, V, A>::insert_before_unchecked;true;true;true;false
rc::Rc::<T, A>::downgrade;false;false;true;false
string::<impl core::cmp::PartialEq<string::String> for str>::ne;false;false;true;false
<core::option::Option<usize> as vec::is_zero::IsZero>::is_zero;false;false;false;false
vec::set_len_on_drop::SetLenOnDrop::<'a>::new;false;false;true;false
collections::btree::set::CursorMut::<'a, T, A>::insert_after;false;false;true;false
vec::into_iter::IntoIter::<T, A>::forget_remaining_elements;false;false;true;false
<collections::binary_heap::DrainSorted<'a, T, A> as core::fmt::Debug>::fmt;false;false;true;false
sync::Arc::<T, A>::downgrade::panic_cold_display;false;false;false;false
task::<impl core::convert::From<rc::Rc<W>> for core::task::RawWaker>::from;false;false;true;false
collections::binary_heap::BinaryHeap::<T, A>::sift_down_range;true;true;true;true
"<collections::vec_deque::VecDeque<T, A> as core::cmp::PartialEq<&[U; N]>>::eq";false;false;true;false
boxed::thin::WithHeader::<H>::new_unsize_zst::max;false;false;false;false
rc::Rc::<T, A>::from_inner_in;true;false;true;false
<collections::btree::set_val::SetValZST as core::cmp::PartialEq>::eq;false;false;false;false
<collections::btree::map::IntoIter<K, V, A> as core::ops::Drop>::drop::DropGuard;false;false;true;false
collections::vec_deque::wrap_index;false;false;false;false
collections::btree::set::entry::VacantEntry::<'a, T, A>::get;false;false;true;false
<collections::linked_list::IterMut<'a, T> as core::iter::Iterator>::next;false;false;true;false
<vec::Vec<T, A> as core::convert::AsMut<vec::Vec<T, A>>>::as_mut;false;false;true;false
<collections::binary_heap::BinaryHeap<T, A> as core::fmt::Debug>::fmt;false;false;true;false
string::String::shrink_to_fit;false;false;true;false
bstr::<impl core::cmp::PartialOrd<borrow::Cow<'a, [u8]>> for &'a core::bstr::ByteStr>::partial_cmp;false;false;true;false
collections::btree::map::CursorMut::<'a, K, V, A>::insert_after_unchecked;true;true;true;false
<sync::UniqueArcUninit<T, A> as core::ops::Drop>::drop;false;true;true;false
sync::Arc::<T, A>::downgrade;false;false;true;true
collections::btree::map::CursorMut::<'a, K, V, A>::insert_before_unchecked;true;true;true;false
collections::binary_heap::Hole::<'a, T>::new;true;true;true;false
collections::btree::merge_iter::MergeIterInner::<I>::new;false;false;false;false
collections::btree::node::NodeRef::<collections::btree::node::marker::Owned, K, V, collections::btree::node::marker::Internal>::from_new_internal;true;false;true;false
collections::binary_heap::BinaryHeap::<T, A>::rebuild_tail::log2_fast;false;false;false;false
<collections::btree::map::ExtractIf<'_, K, V, F, A> as core::iter::Iterator>::size_hint;false;false;true;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<BorrowType, K, V, NodeType>, collections::btree::node::marker::KV>::new_kv;true;false;true;false
<collections::linked_list::IntoIter<T, A> as core::iter::Iterator>::size_hint;false;false;true;false
rc::Rc::<T, A>::into_raw_with_allocator;false;true;true;false
sync::Arc::<[T], A>::allocate_for_slice_in;true;true;false;false
<string::FromUtf16Error as core::error::Error>::description;false;false;false;false
bstr::<impl borrow::ToOwned for core::bstr::ByteStr>::to_owned;false;false;false;false
<bstr::ByteString as core::cmp::PartialEq<borrow::Cow<'_, [u8]>>>::eq;false;false;true;false
<collections::btree::set::IntoIter<T, A> as core::iter::ExactSizeIterator>::len;false;false;true;false
collections::vec_deque::iter::Iter::<'a, T>::as_slices;false;false;true;false
<string::String as core::ops::Index<I>>::index;false;false;true;false
sync::Weak::<T, A>::upgrade::checked_increment::panic_cold_display;false;false;false;false
<bstr::ByteString as core::convert::AsMut<core::bstr::ByteStr>>::as_mut;false;false;true;false
collections::btree::node::NodeRef::<collections::btree::node::marker::Owned, K, V, collections::btree::node::marker::Internal>::new_internal;false;true;true;false
<collections::btree::set::Iter<'a, T> as core::iter::Iterator>::min;false;false;true;false
<string::String as core::iter::Extend<borrow::Cow<'a, str>>>::extend;false;false;true;true
<core::option::Option<u16> as vec::is_zero::IsZero>::is_zero;false;false;false;false
<collections::btree::set::BTreeSet<T, A> as core::clone::Clone>::clone;false;false;true;false
collections::btree::node::NodeRef::<collections::btree::node::marker::Mut<'a>, K, V, collections::btree::node::marker::Leaf>::push_with_handle;true;true;true;false
collections::btree::node::BalancingContext::<'a, K, V>::into_right_child;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::rotate_left;false;true;true;false
<vec::Vec<T, A> as vec::spec_extend::SpecExtend<T, I>>::spec_extend;false;false;true;false
collections::btree::navigate::<impl collections::btree::node::Handle<collections::btree::node::NodeRef<BorrowType, K, V, collections::btree::node::marker::Internal>, collections::btree::node::marker::Edge>>::next_kv;false;false;true;true
<collections::btree::set::Union<'_, T> as core::fmt::Debug>::fmt;false;false;true;false
collections::btree::node::LeftOrRight::Left;false;false;false;false
<collections::btree::set::Difference<'_, T, A> as core::clone::Clone>::clone;false;false;true;false
collections::linked_list::CursorMut::<'a, T, A>::pop_front;false;false;true;false
collections::btree::map::entry::OccupiedEntry::<'a, K, V, A>::key;false;false;true;false
collections::linked_list::LinkedList::<T, A>::cursor_back_mut;false;false;true;false
<ffi::c_str::IntoStringError as core::error::Error>::source;false;false;true;false
collections::btree::set::BTreeSet::<T, A>::pop_last;false;false;true;false
vec::Vec::<T, A>::clear;false;true;true;false
<bstr::ByteString as core::cmp::PartialEq<str>>::eq;false;false;true;false
bstr::<impl core::convert::From<rc::Rc<core::bstr::ByteStr>> for rc::Rc<[u8]>>::from;false;true;true;false
<T as borrow::ToOwned>::to_owned;false;false;false;false
sync::Arc::<T, A>::try_new_zeroed_in;false;true;false;false
<vec::Vec<T, A> as core::hash::Hash>::hash;false;false;true;false
<vec::Vec<T, A> as core::cmp::Ord>::cmp;false;false;true;false
slice::<impl [u8]>::to_ascii_lowercase;false;false;false;false
<sync::Weak<T, A> as core::clone::Clone>::clone;false;false;true;false
collections::btree::navigate::<impl collections::btree::node::NodeRef<collections::btree::node::marker::Immut<'a>, K, V, collections::btree::node::marker::LeafOrInternal>>::calc_length;false;false;true;false
rc::UniqueRc::<T, A>::new_in;false;false;false;false
collections::binary_heap::BinaryHeap::<T, A>::sift_up;true;true;true;true
<vec::into_iter::IntoIter<T, A> as core::iter::DoubleEndedIterator>::next_back;false;true;true;false
<core::option::Option<core::num::NonZero<i16>> as vec::is_zero::IsZero>::is_zero;false;false;true;false
<collections::btree::map::IntoValues<K, V, A> as core::iter::Iterator>::next;false;false;true;false
string::String::try_with_capacity;false;false;false;false
collections::btree::map::entry::OccupiedEntry::<'a, K, V, A>::remove_kv;false;true;true;false
<i64 as vec::is_zero::IsZero>::is_zero;false;false;false;false
<(B, C, D, E, F, G, H) as vec::is_zero::IsZero>::is_zero;false;false;false;false
<&collections::btree::set::BTreeSet<T, A> as core::ops::BitAnd<&collections::btree::set::BTreeSet<T, A>>>::bitand;false;false;true;false
rc::Rc::<T>::from_ptr;true;true;true;false
"<vec::Vec<T> as core::convert::From<&[T; N]>>::from";false;false;false;false
<alloc::Global as core::alloc::Allocator>::grow;true;true;true;false
boxed::iter::<impl core::iter::IntoIterator for &'a mut boxed::Box<[I], A>>::into_iter;false;true;true;false
collections::btree::navigate::LazyLeafRange::<BorrowType, K, V>::init_front;false;true;true;false
"<collections::btree::map::BTreeMap<K, V> as core::convert::From<[(K, V); N]>>::from";false;false;false;false
boxed::convert::<impl core::convert::From<string::String> for boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync + 'a)>>::from;false;false;true;false
collections::binary_heap::BinaryHeap::<T, A>::retain;false;false;true;false
<collections::btree::set::BTreeSet<T, A> as core::iter::Extend<T>>::extend;false;false;true;true
collections::binary_heap::BinaryHeap::<T, A>::iter;false;false;true;false
<collections::btree::map::Values<'a, K, V> as core::iter::Iterator>::last;false;false;true;false
slice::<impl borrow::ToOwned for [T]>::to_owned;false;false;false;false
<core::option::Option<core::option::Option<bool>> as vec::is_zero::IsZero>::is_zero;false;false;true;false
<collections::btree::map::RangeMut<'_, K, V> as core::default::Default>::default;false;false;false;false
string::String::clear;false;false;true;false
collections::btree::set::CursorMut::<'a, T, A>::insert_before_unchecked;true;true;true;false
collections::btree::node::BalancingContext::<'a, K, V>::merge_tracking_parent;false;false;true;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<BorrowType, K, V, collections::btree::node::marker::LeafOrInternal>, Type>::force;false;false;true;false
task::local_raw_waker::clone_waker;true;true;true;false
raw_vec::layout_array;false;false;false;false
collections::btree::node::BalancingContext::<'a, K, V>::merge_tracking_child;false;false;true;false
boxed::iter::<impl core::iter::FromIterator<borrow::Cow<'a, str>> for boxed::Box<str>>::from_iter;false;false;false;false
<collections::btree::map::Values<'_, K, V> as core::iter::ExactSizeIterator>::len;false;false;true;false
collections::btree::node::NodeRef::<BorrowType, K, V, Type>::reborrow;false;false;true;false
sync::Weak::<T, A>::from_raw_in;true;true;true;false
vec::partial_eq::<impl core::cmp::PartialEq<&mut [U]> for vec::Vec<T, A>>::eq;false;false;true;false
<rc::UniqueRc<T, A> as core::fmt::Display>::fmt;false;false;true;false
vec::Vec::<T, A>::as_mut_slice;false;true;true;false
collections::btree::set::BTreeSet::<T, A>::iter;false;false;true;false
<string::Drain<'a> as core::convert::AsRef<str>>::as_ref;false;false;true;false
vec::Vec::<T, A>::truncate;false;true;true;false
<collections::btree::map::IterMut<'a, K, V> as core::iter::Iterator>::max;false;false;true;false
collections::vec_deque::VecDeque::<T>::new;false;false;false;false
<sync::Arc<T, A> as core::ops::Deref>::deref;false;false;true;false
<collections::btree::dedup_sorted_iter::DedupSortedIter<K, V, I> as core::iter::Iterator>::next;false;false;true;true
<rc::Rc<[T]> as core::convert::From<&[T]>>::from;false;false;false;false
<collections::btree::map::BTreeMap<K, V, A> as core::iter::Extend<(K, V)>>::extend_one;false;false;true;false
<char as vec::is_zero::IsZero>::is_zero;false;false;false;false
<collections::btree::map::RangeMut<'a, K, V> as core::iter::Iterator>::min;false;false;true;false
collections::btree::fix::<impl collections::btree::node::Handle<collections::btree::node::NodeRef<collections::btree::node::marker::Mut<'a>, K, V, collections::btree::node::marker::LeafOrInternal>, collections::btree::node::marker::KV>>::fix_right_border_of_right_edge;false;false;true;true
boxed::Box::<T, A>::pin_in;false;false;false;false
<collections::vec_deque::VecDeque<T, A> as core::iter::Extend<&'a T>>::extend_one_unchecked;true;true;true;false
slice::stable_sort;false;false;true;false
<core::option::Option<core::num::NonZero<i128>> as vec::is_zero::IsZero>::is_zero;false;false;true;false
<ffi::c_str::NulError as core::fmt::Display>::fmt;false;false;true;false
<rc::RcInner<T> as rc::RcInnerPtr>::strong_ref;false;false;true;false
<collections::btree::set::BTreeSet<T, A> as core::iter::Extend<&'a T>>::extend;false;false;true;false
collections::linked_list::CursorMut::<'a, T, A>::remove_current_as_list;false;true;true;false
string::<impl core::cmp::PartialEq<string::String> for borrow::Cow<'a, str>>::eq;false;false;true;false
sync::Arc::<T, A>::decrement_strong_count_in;true;true;true;false
str::join_generic_copy;false;true;false;true
vec::Vec::<T, A>::as_ptr;false;false;true;false
string::<impl core::cmp::PartialEq<&'b str> for borrow::Cow<'a, str>>::ne;false;false;true;false
collections::linked_list::LinkedList::<T, A>::pop_back_node;false;false;true;false
boxed::Box::<T>::try_new_uninit;false;false;false;false
<collections::btree::node::Handle<Node, Type> as core::clone::Clone>::clone;false;false;true;false
<collections::btree::set::entry::OccupiedEntry<'_, T, A> as core::fmt::Debug>::fmt;false;false;true;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<collections::btree::node::marker::Dying, K, V, NodeType>, collections::btree::node::marker::KV>::drop_key_val::Dropper;false;false;true;false
bstr::<impl core::convert::From<bstr::ByteString> for vec::Vec<u8>>::from;false;false;true;false
vec::Vec::<T, A>::try_with_capacity_in;false;false;false;false
boxed::thin::WithHeader::<H>::header_size;false;false;false;false
str::<impl str>::to_ascii_lowercase;false;false;false;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<collections::btree::node::marker::Mut<'a>, K, V, collections::btree::node::marker::Leaf>, collections::btree::node::marker::KV>::remove;false;true;true;false
<collections::TryReserveErrorKind as core::cmp::PartialEq>::eq;false;false;false;false
collections::btree::node::NodeRef::<BorrowType, K, V, collections::btree::node::marker::Internal>::forget_type;false;false;true;false
<string::String as core::fmt::Display>::fmt;false;false;true;false
<bstr::ByteString as core::ops::Index<core::ops::RangeFull>>::index;false;false;true;false
<collections::binary_heap::BinaryHeap<T> as core::default::Default>::default;false;false;false;false
<collections::linked_list::ExtractIf<'_, T, F, A> as core::iter::Iterator>::size_hint;false;false;true;false
<collections::vec_deque::drain::Drain<'_, T, A> as core::iter::Iterator>::size_hint;false;false;true;false
collections::btree::node::NodeRef::<collections::btree::node::marker::DormantMut, K, V, Type>::awaken;true;false;true;false
collections::btree::map::BTreeMap::<K, V, A>::new_in;false;false;false;false
collections::btree::remove::<impl collections::btree::node::Handle<collections::btree::node::NodeRef<collections::btree::node::marker::Mut<'a>, K, V, collections::btree::node::marker::LeafOrInternal>, collections::btree::node::marker::KV>>::remove_kv_tracking;false;false;true;false
string::IntoChars::into_string;false;true;true;true
<collections::binary_heap::Iter<'a, T> as core::iter::Iterator>::last;false;false;true;true
raw_vec::RawVecInner::<A>::shrink_to_fit;false;false;true;false
boxed::convert::<impl core::convert::From<&[T]> for boxed::Box<[T]>>::from;false;false;false;false
collections::btree::node::NodeRef::<collections::btree::node::marker::Owned, K, V, collections::btree::node::marker::LeafOrInternal>::push_internal_level;false;false;true;false
<collections::binary_heap::Drain<'a, T, A> as core::fmt::Debug>::fmt;false;false;true;false
sync::Weak::<T>::from_raw;true;true;true;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<collections::btree::node::marker::Mut<'a>, K, V, collections::btree::node::marker::Leaf>, collections::btree::node::marker::Edge>::insert;false;true;true;false
collections::btree::node::marker::Mut;false;false;true;false
sync::Arc::<T>::from_raw;true;true;true;false
rc::Rc::<T>::new_uninit;false;true;false;false
"vec::cow::<impl core::convert::From<&'a [T; N]> for borrow::Cow<'a, [T]>>::from";false;false;false;false
collections::linked_list::Cursor::<'a, T, A>::peek_prev;false;true;true;false
slice::<impl core::borrow::BorrowMut<[T]> for vec::Vec<T, A>>::borrow_mut;false;false;true;false
<boxed::convert::<impl core::convert::From<string::String> for boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync + 'a)>>::from::StringError as core::error::Error>::description;false;false;true;false
borrow::ToOwned::clone_into;false;false;true;false
boxed::Box::<T, A>::try_new_in;false;true;false;false
collections::btree::set::entry::Entry::<'a, T, A>::insert;false;false;true;false
boxed::iter::<impl core::iter::Iterator for boxed::Box<I, A>>::next;false;true;true;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<BorrowType, K, V, NodeType>, collections::btree::node::marker::KV>::left_edge;false;true;true;false
<boxed::Box<T, A> as core::hash::Hasher>::write_u64;false;true;true;false
vec::partial_eq::<impl core::cmp::PartialEq<[U]> for vec::Vec<T, A>>::ne;false;false;true;false
raw_vec::RawVecInner::with_capacity;false;false;false;false
<string::FromUtf16Error as core::fmt::Display>::fmt;false;false;true;false
task::raw_waker::wake;true;true;true;false
collections::btree::map::IntoIter::<K, V, A>::iter;false;false;true;false
collections::btree::split::<impl collections::btree::node::NodeRef<collections::btree::node::marker::Owned, K, V, collections::btree::node::marker::LeafOrInternal>>::split_off;false;false;true;true
collections::btree::node::NodeRef::<collections::btree::node::marker::Mut<'a>, K, V, Type>::reborrow_mut;true;false;true;false
collections::vec_deque::VecDeque::<T, A>::try_reserve_exact;false;true;true;false
raw_vec::RawVecInner::<A>::ptr;false;false;true;false
collections::linked_list::LinkedList::<T, A>::retain_mut;false;false;true;true
collections::btree::set::DifferenceInner::Iterate;false;false;true;false
sync::Arc::<T>::try_pin;false;true;false;false
boxed::iter::<impl core::iter::ExactSizeIterator for boxed::Box<I, A>>::len;false;true;false;false
vec::Vec::<T, A>::insert;false;true;true;false
collections::binary_heap::BinaryHeap::<T, A>::rebuild;false;true;true;true
<ffi::c_str::CString as core::cmp::PartialEq>::eq;false;false;false;false
collections::btree::navigate::<impl collections::btree::node::NodeRef<BorrowType, K, V, collections::btree::node::marker::LeafOrInternal>>::find_leaf_edges_spanning_range;true;true;true;true
<collections::vec_deque::VecDeque<T, A> as collections::vec_deque::spec_extend::SpecExtend<T, vec::into_iter::IntoIter<T>>>::spec_extend;false;true;true;false
<ffi::c_str::NulError as core::cmp::Eq>::assert_receiver_is_total_eq;false;false;true;false
boxed::iter::<impl core::iter::DoubleEndedIterator for boxed::Box<I, A>>::nth_back;false;true;true;false
<bstr::ByteString as core::ops::Index<core::ops::RangeTo<usize>>>::index;false;false;true;false
<&'b string::String as core::str::pattern::Pattern>::into_searcher;false;false;true;false
<rc::Rc<T, A> as core::cmp::PartialEq>::ne;false;false;true;false
collections::binary_heap::BinaryHeap::<T, A>::is_empty;false;false;true;false
rc::Rc::<(dyn core::any::Any + 'static), A>::downcast_unchecked;true;true;true;false
raw_vec::RawVecInner::<A>::grow_amortized;false;true;true;false
<collections::btree::map::Values<'_, K, V> as core::clone::Clone>::clone;false;false;true;false
rc::Rc::<T, A>::decrement_strong_count_in;true;true;true;false
<collections::vec_deque::iter_mut::IterMut<'_, T> as core::fmt::Debug>::fmt;false;false;true;false
<collections::btree::map::RangeMut<'a, K, V> as core::iter::Iterator>::last;false;false;true;false
collections::btree::node::NodeRef::<collections::btree::node::marker::Mut<'a>, K, V, collections::btree::node::marker::Internal>::push;false;true;true;false
<sync::Arc<str> as core::convert::From<&str>>::from;false;true;false;false
collections::btree::set::entry::Entry::Vacant;false;false;true;false
collections::btree::set::BTreeSet::<T, A>::range;false;false;true;false
fmt::format::format_inner;false;false;true;false
vec::partial_eq::<impl core::cmp::PartialEq<&mut [U]> for vec::Vec<T, A>>::ne;false;false;true;false
boxed::iter::<impl core::iter::FromIterator<char> for boxed::Box<str>>::from_iter;false;false;false;false
<collections::btree::set::Iter<'_, T> as core::iter::ExactSizeIterator>::len;false;false;true;false
<collections::btree::set::IntoIter<T, A> as core::default::Default>::default;false;false;false;false
<vec::Vec<T, A> as core::ops::Drop>::drop;false;true;true;false
collections::btree::set::BTreeSet::<T, A>::new_in;false;false;false;false
<i128 as vec::is_zero::IsZero>::is_zero;false;false;false;false
<collections::vec_deque::iter::Iter<'a, T> as core::iter::Iterator>::advance_by;false;false;true;true
<boxed::Box<str> as core::clone::Clone>::clone;false;true;false;false
<collections::btree::map::Values<'a, K, V> as core::iter::Iterator>::next;false;false;true;false
collections::btree::map::CursorMutKey::<'a, K, V, A>::peek_prev;false;true;true;false
<boxed::Box<F, A> as core::future::Future>::poll;false;true;true;false
<collections::btree::map::Iter<'_, K, V> as core::clone::Clone>::clone;false;false;true;false
<rc::UniqueRc<T, A> as core::borrow::BorrowMut<T>>::borrow_mut;false;false;true;false
<I as vec::in_place_collect::SpecInPlaceCollect<T, I>>::collect_in_place;true;true;true;true
ffi::c_str::<impl core::convert::From<ffi::c_str::CString> for vec::Vec<u8>>::from;false;false;false;false
rc::Rc::<[T]>::allocate_for_slice;true;true;false;false
string::<impl core::iter::FromIterator<char> for borrow::Cow<'a, str>>::from_iter;false;false;false;false
raw_vec::RawVec::<T, A>::grow_one;false;false;true;false
<string::FromUtf8Error as core::cmp::PartialEq>::eq;false;false;true;false
string::String::as_mut_str;false;true;true;false
<vec::drain::Drain<'_, T, A> as core::fmt::Debug>::fmt;false;false;true;false
<raw_vec::RawVec<T, A> as core::ops::Drop>::drop;false;true;true;false
vec::Vec::<T, A>::extend_from_within;false;true;true;false
collections::btree::node::splitpoint;false;false;false;false
collections::binary_heap::PeekMut::<'a, T, A>::refresh;false;true;true;false
<&&&&&&&&&&&str as string::SpecToString>::spec_to_string;false;false;false;false
<sync::Arc<T, A> as core::fmt::Display>::fmt;false;false;true;false
<boxed::Box<T, A> as core::ops::Deref>::deref;false;true;false;false
<core::option::Option<core::num::NonZero<i32>> as vec::is_zero::IsZero>::is_zero;false;false;true;false
collections::btree::map::BTreeMap::<K, V, A>::insert;false;false;true;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<BorrowType, K, V, collections::btree::node::marker::Leaf>, collections::btree::node::marker::Edge>::forget_node_type;false;true;true;false
<collections::linked_list::Iter<'_, T> as core::clone::Clone>::clone;false;false;true;false
str::<impl str>::replacen;false;true;false;true
string::String::truncate;false;false;true;false
<collections::btree::set::SymmetricDifference<'a, T> as core::iter::Iterator>::size_hint;false;false;true;false
<rc::WeakInner<'a> as rc::RcInnerPtr>::strong_ref;false;false;true;false
raw_vec::RawVec::<T, A>::from_raw_parts_in;true;true;true;false
boxed::thin::ThinBox::<T>::meta;false;true;true;false
string::String::from_utf16be_lossy;false;true;false;true
<V as collections::btree::set_val::IsSetVal>::is_set_val;false;false;false;false
sync::Weak::<T, A>::into_raw_with_allocator;false;true;true;false
<collections::btree::set::Iter<'_, T> as core::fmt::Debug>::fmt;false;false;true;false
collections::btree::set::CursorMut::<'a, T, A>::prev;false;false;true;false
boxed::convert::<impl boxed::Box<(dyn core::any::Any + 'static), A>>::downcast_unchecked;true;true;false;false
<collections::btree::map::entry::OccupiedError<'a, K, V, A> as core::fmt::Display>::fmt;false;false;true;false
<&'b string::String as core::str::pattern::Pattern>::as_utf8_pattern;false;false;true;false
<borrow::Cow<'_, str> as string::SpecToString>::spec_to_string;false;false;true;false
<collections::vec_deque::iter::Iter<'_, T> as core::iter::ExactSizeIterator>::is_empty;false;false;true;false
<string::String as core::fmt::Write>::write_str;false;false;true;false
collections::binary_heap::BinaryHeap::<T, A>::reserve_exact;false;false;true;false
raw_vec::RawVec::<T, A>::new_in;false;false;false;false
<collections::btree::navigate::LazyLeafRange<collections::btree::node::marker::Immut<'a>, K, V> as core::clone::Clone>::clone;false;false;true;false
str::<impl borrow::ToOwned for str>::clone_into;false;false;true;false
collections::btree::append::<impl collections::btree::node::NodeRef<collections::btree::node::marker::Owned, K, V, collections::btree::node::marker::LeafOrInternal>>::bulk_push;false;false;true;true
vec::drain::Drain::<'a, T, A>::as_slice;false;false;true;false
<vec::drain::Drain<'_, T, A> as core::iter::ExactSizeIterator>::is_empty;false;false;true;false
<vec::Vec<T, A> as core::clone::Clone>::clone;false;false;true;false
<alloc::Global as core::default::Default>::default;false;false;false;false
<collections::vec_deque::VecDeque<T, A> as core::iter::Extend<T>>::extend_one_unchecked;true;true;true;false
boxed::Box::<T, A>::new_zeroed_in;false;false;false;false
ffi::c_str::CString::into_boxed_c_str;false;true;false;false
<rc::Rc<T, A> as core::ops::Deref>::deref;false;false;true;false
<collections::linked_list::LinkedList<T> as collections::SpecExtend<collections::linked_list::LinkedList<T>>>::spec_extend;false;false;true;false
<u8 as vec::spec_from_elem::SpecFromElem>::from_elem;false;true;false;false
rc::Rc::<[T], A>::new_uninit_slice_in;false;true;false;false
sync::Arc::<T, A>::get_mut;false;true;true;false
ffi::c_str::<impl borrow::ToOwned for core::ffi::CStr>::clone_into;false;false;true;false
<collections::linked_list::LinkedList<T, A> as core::iter::Extend<T>>::extend;false;false;true;false
<boxed::thin::ThinBox<T> as core::fmt::Debug>::fmt;false;false;true;false
boxed::iter::<impl core::iter::IntoIterator for boxed::Box<[I], A>>::into_iter;false;false;false;false
bstr::<impl core::convert::From<sync::Arc<core::bstr::ByteStr>> for sync::Arc<[u8]>>::from;false;true;true;false
<collections::btree::append::MergeIter<K, V, I> as core::iter::Iterator>::next;false;false;true;false
<rc::UniqueRc<T, A> as core::cmp::PartialOrd>::le;false;false;true;false
vec::partial_eq::<impl core::cmp::PartialEq<vec::Vec<U, A>> for [T]>::eq;false;false;true;false
sync::UniqueArcUninit::<T, A>::new;false;true;false;false
collections::binary_heap::BinaryHeap::<T, A>::append;false;false;true;false
<bstr::ByteString as core::cmp::PartialEq<&[u8]>>::eq;false;false;true;false
collections::binary_heap::BinaryHeap::<T>::with_capacity;false;false;false;false
<collections::btree::map::BTreeMap<K, V, A> as core::ops::Drop>::drop;false;true;true;false
<string::String as core::iter::Extend<char>>::extend_one;false;false;true;false
<sync::Arc<[T]> as sync::ArcFromSlice<T>>::from_slice;false;true;false;false
<string::String as core::cmp::PartialOrd>::partial_cmp;false;false;true;false
vec::partial_eq::<impl core::cmp::PartialEq<&mut [U]> for borrow::Cow<'_, [T]>>::eq;false;false;true;false
ffi::c_str::IntoStringError::description;false;false;true;false
vec::Vec::<T, A>::push;false;true;true;false
<collections::btree::map::Iter<'_, K, V> as core::iter::ExactSizeIterator>::len;false;false;true;false
<collections::btree::set::SymmetricDifference<'a, T> as core::iter::Iterator>::next;false;false;true;true
<collections::binary_heap::Drain<'_, T, A> as core::iter::ExactSizeIterator>::is_empty;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::push_back;false;true;true;false
bstr::<impl core::cmp::PartialEq<string::String> for core::bstr::ByteStr>::eq;false;false;true;false
raw_vec::RawVecInner::<A>::new_in;false;false;false;false
<<collections::btree::map::IntoIter<K, V, A> as core::ops::Drop>::drop::DropGuard<'a, K, V, A> as core::ops::Drop>::drop;false;true;true;true
<string::String as core::iter::FromIterator<char>>::from_iter;false;false;false;false
collections::btree::set::entry::Entry::<'a, T, A>::get;false;false;true;false
<u64 as vec::is_zero::IsZero>::is_zero;false;false;false;false
<boxed::Box<[T]> as boxed::convert::BoxFromSlice<T>>::from_slice;false;false;false;false
<collections::btree::set_val::SetValZST as core::default::Default>::default;false;false;false;false
collections::linked_list::CursorMut::<'a, T, A>::push_front;false;false;true;false
rc::Weak::<T, A>::upgrade;false;true;true;false
<vec::Vec<T, A> as core::iter::Extend<&'a T>>::extend_reserve;false;false;true;false
fmt::format;false;false;true;false
<collections::binary_heap::IntoIter<T, A> as core::iter::Iterator>::size_hint;false;false;true;false
"<collections::linked_list::LinkedList<T> as core::convert::From<[T; N]>>::from";false;false;false;false
ffi::c_str::FromVecWithNulError::into_bytes;false;false;true;false
vec::Vec::<T, A>::push_within_capacity;false;true;true;false
collections::btree::merge_iter::MergeIterInner::<I>::nexts;false;false;true;false
sync::Weak::<T, A>::upgrade::checked_increment;false;false;false;false
vec::Vec::<T, A>::pop_if;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::binary_search_by;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::copy_slice;true;true;true;false
<collections::vec_deque::VecDeque<T> as core::default::Default>::default;false;false;false;false
vec::partial_eq::<impl core::cmp::PartialEq<&[U]> for borrow::Cow<'_, [T]>>::ne;false;false;true;false
<collections::btree::set::Difference<'_, T, A> as core::fmt::Debug>::fmt;false;false;true;false
vec::from_elem;false;false;false;false
<bstr::ByteString as core::cmp::PartialOrd<borrow::Cow<'_, core::bstr::ByteStr>>>::partial_cmp;false;false;true;false
<collections::btree::map::IntoIter<K, V, A> as core::iter::DoubleEndedIterator>::next_back;false;false;true;false
collections::btree::set::BTreeSet::<T, A>::replace;false;false;true;false
<boxed::Box<T, A> as core::hash::Hash>::hash;false;true;true;false
collections::btree::set::BTreeSet::<T, A>::split_off;false;false;true;false
boxed::Box::<core::mem::MaybeUninit<T>, A>::write;false;true;false;false
collections::vec_deque::VecDeque::<T, A>::drain;false;true;true;false
rc::Rc::<T, A>::make_mut;false;true;true;false
<string::IntoChars as core::iter::Iterator>::next;false;false;true;true
<sync::Arc<T> as core::error::Error>::cause;false;false;true;false
<bstr::ByteString as core::iter::FromIterator<&'a core::bstr::ByteStr>>::from_iter;false;false;false;true
collections::btree::set::CursorMutKey::<'a, T, A>::remove_next;false;false;true;false
<collections::btree::map::IntoValues<K, V, A> as core::iter::Iterator>::last;false;false;true;false
<sync::Arc<[T]> as core::convert::From<&[T]>>::from;false;false;false;false
collections::btree::map::BTreeMap::<K, V, A>::get_mut;false;false;true;false
sync::Arc::<T>::try_new_zeroed;false;true;false;false
<collections::binary_heap::BinaryHeap<T, A> as core::clone::Clone>::clone_from;false;false;true;false
<collections::btree::map::Values<'_, K, V> as core::default::Default>::default;false;false;false;false
<collections::vec_deque::VecDeque<T, A> as core::iter::Extend<T>>::extend;false;false;true;false
boxed::convert::<impl (dyn core::error::Error + 'static)>::downcast;false;true;false;false
string::<impl core::cmp::PartialEq<&'b str> for borrow::Cow<'a, str>>::eq;false;false;true;false
sync::Arc::<T, A>::new_zeroed_in;false;true;false;false
vec::Vec::<T, A>::into_parts_with_alloc;false;true;true;false
<collections::linked_list::LinkedList<T, A> as core::hash::Hash>::hash;false;false;true;true
collections::btree::map::Cursor::<'a, K, V>::prev;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::is_full;false;false;true;false
boxed::thin::WithOpaqueHeader::new_unsize_zst;false;false;false;false
collections::vec_deque::VecDeque::<T, A>::iter_mut;false;false;true;false
<collections::binary_heap::IntoIter<T> as core::default::Default>::default;false;false;false;false
<boxed::thin::ThinBox<T> as core::ops::Drop>::drop;false;true;true;false
bstr::<impl core::cmp::PartialEq<bstr::ByteString> for borrow::Cow<'_, [u8]>>::eq;false;false;true;false
<ffi::c_str::NulError as core::error::Error>::description;false;false;true;false
string::String::with_capacity;false;false;false;false
collections::linked_list::assert_covariance::a;false;false;true;false
"<bstr::ByteString as core::cmp::PartialEq<[u8; N]>>::eq";false;false;true;false
rc::Rc::<[T]>::new_uninit_slice;false;true;false;false
vec::Vec::<T>::try_with_capacity;false;false;false;false
raw_vec::finish_grow;false;true;true;false
collections::btree::navigate::LeafRange::<BorrowType, K, V>::perform_next_back_checked;false;false;true;false
<collections::btree::set::Union<'a, T> as core::iter::Iterator>::next;false;false;true;false
collections::linked_list::assert_covariance::b;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::push_unchecked;true;true;true;false
collections::btree::node::LeafNode::<K, V>::new;false;true;false;false
collections::vec_deque::VecDeque::<T, A>::pop_front;false;true;true;false
rc::Rc::<T>::try_new;false;true;false;false
raw_vec::RawVec::<T>::with_capacity_zeroed;false;false;false;false
<T as string::ToString>::to_string;false;false;false;false
string::<impl core::convert::From<string::String> for boxed::Box<str>>::from;false;false;true;false
<boxed::Box<T, A> as core::clone::Clone>::clone;false;true;false;false
<borrow::Cow<'a, B> as core::cmp::PartialOrd>::partial_cmp;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::copy;true;true;true;false
sync::Arc::<T>::try_new_uninit;false;true;false;false
collections::btree::map::CursorMut::<'a, K, V, A>::as_cursor;false;false;true;false
collections::btree::navigate::LazyLeafHandle::Root;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::grow;false;true;true;false
<collections::vec_deque::iter::Iter<'a, T> as core::iter::Iterator>::next;false;false;true;false
collections::linked_list::Cursor::<'a, T, A>::front;false;false;true;false
vec::partial_eq::<impl core::cmp::PartialEq<vec::Vec<U, A>> for borrow::Cow<'_, [T]>>::eq;false;false;true;false
sync::Arc::<T, A>::into_inner;false;true;true;false
collections::btree::borrow::DormantMutRef::<'a, T>::awaken;true;true;true;false
<vec::Vec<T> as vec::spec_from_iter::SpecFromIter<T, vec::into_iter::IntoIter<T>>>::from_iter;false;true;true;false
<collections::binary_heap::DrainSorted<'a, T, A> as core::ops::Drop>::drop;false;false;true;true
string::<impl core::cmp::PartialEq<borrow::Cow<'a, str>> for str>::eq;false;false;true;false
<string::String as core::convert::AsRef<[u8]>>::as_ref;false;false;true;false
<collections::btree::map::Keys<'_, K, V> as core::clone::Clone>::clone;false;false;true;false
<collections::TryReserveError as core::convert::From<collections::TryReserveErrorKind>>::from;false;false;false;false
<collections::binary_heap::Drain<'_, T, A> as core::iter::Iterator>::size_hint;false;false;true;false
sync::Arc::<T, A>::from_box_in;false;true;false;false
boxed::iter::<impl core::iter::Iterator for boxed::Box<I, A>>::nth;false;true;true;true
<string::String as core::str::FromStr>::from_str;false;false;false;false
collections::btree::map::entry::VacantEntry::<'a, K, V, A>::insert_entry;false;true;true;false
vec::cow::<impl core::iter::FromIterator<T> for borrow::Cow<'a, [T]>>::from_iter;false;false;false;false
<core::option::Option<core::num::NonZero<i8>> as vec::is_zero::IsZero>::is_zero;false;false;true;false
collections::linked_list::LinkedList::<T, A>::split_off;false;true;true;true
boxed::Box::<T, A>::into_boxed_slice;false;true;false;false
collections::linked_list::CursorMut::<'a, T, A>::insert_before;false;true;true;false
<collections::vec_deque::iter::Iter<'_, T> as core::fmt::Debug>::fmt;false;false;true;false
<&'b string::String as core::str::pattern::Pattern>::strip_prefix_of;false;false;true;false
<string::FromUtf8Error as core::fmt::Debug>::fmt;false;false;true;false
<u8 as vec::is_zero::IsZero>::is_zero;false;false;false;false
collections::btree::map::entry::VacantEntry::<'a, K, V, A>::key;false;false;true;false
<collections::linked_list::LinkedList<T, A> as core::iter::IntoIterator>::into_iter;false;false;true;false
boxed::thin::WithHeader::<H>::new_unsize_zst;false;true;false;false
rc::Weak::<T>::from_raw;true;true;true;false
boxed::Box::<T, A>::into_raw_with_allocator;false;true;false;false
"bstr::<impl core::cmp::PartialEq<bstr::ByteString> for &[u8; N]>::eq";false;false;true;false
collections::btree::map::BTreeMap::<K, V, A>::get;false;false;true;false
<sync::Arc<T, A> as core::cmp::PartialOrd>::lt;false;false;true;false
<boxed::thin::ThinBox<T> as core::fmt::Display>::fmt;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::is_contiguous;false;false;true;false
<rc::Weak<T, A> as core::ops::Drop>::drop;false;true;true;false
<rc::UniqueRcUninit<T, A> as core::ops::Drop>::drop;false;true;true;false
<collections::binary_heap::IntoIter<T, A> as core::iter::Iterator>::next;false;false;true;false
raw_vec::RawVecInner::<A>::set_ptr_and_cap;true;true;true;false
sync::Arc::<[core::mem::MaybeUninit<T>], A>::assume_init;true;true;true;false
collections::linked_list::LinkedList::<T, A>::pop_back;false;false;true;false
<bool as string::SpecToString>::spec_to_string;false;false;false;false
<vec::into_iter::IntoIter<T, A> as core::iter::DoubleEndedIterator>::advance_back_by;false;true;true;false
ffi::c_str::CString::as_bytes;false;true;false;false
<collections::btree::set::DifferenceInner<'_, T, A> as core::fmt::Debug>::fmt;false;false;true;false
collections::btree::map::CursorMut::<'a, K, V, A>::remove_next;false;false;true;false
collections::linked_list::LinkedList::<T, A>::push_front;false;true;true;false
boxed::thin::ThinBox::<T>::new;false;false;false;false
collections::btree::search::<impl collections::btree::node::NodeRef<BorrowType, K, V, collections::btree::node::marker::LeafOrInternal>>::search_tree_for_bifurcation;false;true;true;true
vec::extract_if::ExtractIf::<'a, T, F, A>::new;false;true;true;false
<vec::Vec<T> as core::convert::From<borrow::Cow<'a, [T]>>>::from;false;false;true;false
<vec::Vec<T, A> as core::iter::Extend<&'a T>>::extend_one_unchecked;true;true;true;false
collections::btree::map::entry::Entry::<'a, K, V, A>::or_insert_with_key;false;false;true;false
bstr::ByteString::as_bytestr;false;false;true;false
collections::btree::map::BTreeMap::<K, V, A>::get_key_value;false;false;true;false
collections::linked_list::LinkedList::<T, A>::pop_front;false;false;true;false
collections::btree::map::CursorMutKey::<'a, K, V, A>::peek_next;false;true;true;false
collections::btree::node::NodeRef::<collections::btree::node::marker::Mut<'a>, K, V, collections::btree::node::marker::LeafOrInternal>::set_parent_link;false;true;true;false
rc::rc_inner_layout_for_value_layout;false;false;false;false
<bstr::ByteString as core::default::Default>::default;false;false;false;false
vec::Vec::<T, A>::dedup;false;false;true;false
rc::Rc::<T, A>::from_box_in;false;true;false;false
<boxed::Box<[T]> as core::default::Default>::default;false;false;false;false
<core::fmt::Arguments<'_> as string::SpecToString>::spec_to_string;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::capacity;false;false;true;false
rc::Rc::<T, A>::inner;false;true;true;false
bstr::<impl core::cmp::PartialEq<bstr::ByteString> for [u8]>::eq;false;false;true;false
collections::btree::node::NodeRef::<collections::btree::node::marker::Mut<'a>, K, V, collections::btree::node::marker::Internal>::correct_all_childrens_parent_links;false;true;true;false
<collections::binary_heap::PeekMut<'_, T, A> as core::ops::Drop>::drop;false;true;true;false
<boxed::Box<T, A> as core::convert::AsMut<T>>::as_mut;false;true;true;false
<collections::binary_heap::DrainSorted<'_, T, A> as core::iter::Iterator>::size_hint;false;false;true;false
collections::vec_deque::iter_mut::IterMut::<'a, T>::into_slices;false;false;true;false
<string::String as core::ops::Add<&str>>::add;false;false;true;false
sync::Arc::<core::mem::MaybeUninit<T>, A>::assume_init;true;true;true;false
<sync::Arc<str> as core::convert::From<&mut str>>::from;false;false;true;false
vec::partial_eq::<impl core::cmp::PartialEq<&[U]> for borrow::Cow<'_, [T]>>::eq;false;false;true;false
<core::option::Option<u64> as vec::is_zero::IsZero>::is_zero;false;false;false;false
collections::vec_deque::<impl core::convert::From<collections::vec_deque::VecDeque<T, A>> for vec::Vec<T, A>>::from;false;true;true;false
<vec::Vec<T, A>::dedup_by::FillGapOnDrop<'a, T, A> as core::ops::Drop>::drop;false;true;true;false
<boxed::Box<str> as core::default::Default>::default;false;true;false;false
collections::linked_list::CursorMut::<'a, T, A>::back;false;false;true;false
<collections::vec_deque::iter::Iter<'_, T> as core::default::Default>::default;false;false;false;false
<vec::Vec<T, A> as vec::spec_extend::SpecExtend<T, vec::into_iter::IntoIter<T>>>::spec_extend;false;true;true;false
<vec::splice::Splice<'_, I, A> as core::iter::Iterator>::size_hint;false;false;true;false
"<sync::Arc<[T; N], A> as core::convert::TryFrom<sync::Arc<[T], A>>>::try_from";false;true;true;false
ffi::c_str::<impl core::ffi::CStr>::into_c_string;false;false;false;false
collections::btree::navigate::<impl collections::btree::node::Handle<collections::btree::node::NodeRef<collections::btree::node::marker::Dying, K, V, collections::btree::node::marker::Leaf>, collections::btree::node::marker::Edge>>::deallocating_end;false;true;true;true
<string::String as core::clone::Clone>::clone_from;false;false;true;false
<core::option::Option<core::num::NonZero<u8>> as vec::is_zero::IsZero>::is_zero;false;false;true;false
<bstr::ByteString as core::clone::Clone>::clone;false;false;true;false
collections::linked_list::Node::<T>::into_element;false;true;true;false
<vec::Vec<u8> as core::convert::From<&str>>::from;false;false;false;false
collections::btree::navigate::<impl collections::btree::node::NodeRef<BorrowType, K, V, collections::btree::node::marker::LeafOrInternal>>::last_leaf_edge;false;false;true;true
ffi::c_str::<impl core::default::Default for boxed::Box<core::ffi::CStr>>::default;false;true;false;false
<collections::btree::map::Range<'a, K, V> as core::iter::Iterator>::min;false;false;true;false
string::String::insert;false;true;true;false
bstr::<impl core::cmp::PartialEq<bstr::ByteString> for str>::eq;false;false;true;false
collections::btree::navigate::LazyLeafHandle::<BorrowType, K, V>::reborrow;false;false;true;false
<collections::binary_heap::PeekMut<'_, T, A> as core::fmt::Debug>::fmt;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::make_contiguous;false;true;true;false
<collections::linked_list::LinkedList<T, A> as core::clone::Clone>::clone;false;false;true;false
collections::binary_heap::BinaryHeap::<T, A>::try_reserve_exact;false;false;true;false
"<[T; N] as vec::is_zero::IsZero>::is_zero";false;false;false;true
collections::btree::set::CursorMutKey::<'a, T, A>::insert_after_unchecked;true;true;true;false
str::<impl slice::Concat<str> for [S]>::concat;false;false;false;false
boxed::Box::<T>::new;false;true;false;false
sync::Weak::<T, A>::new_in;false;false;false;false
<collections::vec_deque::iter_mut::IterMut<'a, T> as core::iter::DoubleEndedIterator>::next_back;false;false;true;false
rc::UniqueRcUninit::<T, A>::data_ptr;false;true;true;false
task::Wake::wake_by_ref;false;false;true;false
collections::binary_heap::BinaryHeap::<T, A>::try_reserve;false;false;true;false
<boxed::Box<T, A> as core::ops::Drop>::drop;false;true;true;false
sync::Arc::<T, A>::new_in;false;true;false;false
<collections::btree::set::Iter<'a, T> as core::iter::Iterator>::last;false;false;true;false
<rc::UniqueRc<T, A> as core::convert::AsMut<T>>::as_mut;false;false;true;false
<ffi::c_str::FromBytesWithNulErrorKind as core::fmt::Debug>::fmt;false;false;true;false
<&str as ffi::c_str::CString::new::SpecNewImpl>::spec_new_impl;false;false;false;false
<sync::Arc<[T]> as core::convert::From<&mut [T]>>::from;false;false;true;false
collections::btree::node::NodeRef::<BorrowType, K, V, Type>::len;false;true;true;false
collections::btree::map::CursorMut::<'a, K, V, A>::prev;false;false;true;false
collections::linked_list::CursorMut::<'a, T, A>::split_before;false;true;true;false
vec::into_iter::IntoIter::<T, A>::forget_allocation_drop_remaining;false;true;true;false
vec::Vec::<T>::from_raw_parts;true;true;true;false
vec::<impl core::convert::From<vec::Vec<T, A>> for boxed::Box<[T], A>>::from;false;false;true;false
<rc::UniqueRc<T, A> as core::ops::DerefMut>::deref_mut;false;true;true;false
<collections::btree::map::BTreeMap<K, V, A> as core::clone::Clone>::clone::clone_subtree;false;true;true;true
<rc::Rc<T, A> as core::convert::From<boxed::Box<T, A>>>::from;false;false;false;false
boxed::iter::<impl core::iter::Iterator for boxed::Box<I, A>>::last;false;false;false;false
<<collections::vec_deque::drain::Drain<'_, T, A> as core::ops::Drop>::drop::DropGuard<'r, 'a, T, A> as core::ops::Drop>::drop;false;true;true;false
<ffi::c_str::CString as core::cmp::PartialOrd>::partial_cmp;false;false;false;false
string::FromUtf8Error::utf8_error;false;false;true;false
collections::btree::fix::<impl collections::btree::node::Handle<collections::btree::node::NodeRef<collections::btree::node::marker::Mut<'a>, K, V, collections::btree::node::marker::Internal>, collections::btree::node::marker::KV>>::fix_right_child;false;false;true;false
vec::partial_eq::<impl core::cmp::PartialEq<vec::Vec<U, A>> for &mut [T]>::eq;false;false;true;false
boxed::thin::WithHeader::<H>::try_new;false;true;false;false
collections::btree::search::SearchResult::GoDown;false;false;true;false
collections::btree::mem::replace;false;true;true;false
<ffi::c_str::CString as core::ops::Index<core::ops::RangeFull>>::index;false;false;false;false
collections::btree::map::CursorMut::<'a, K, V, A>::next;false;false;true;false
sync::Arc::<[T]>::from_iter_exact;true;true;false;true
<sync::Arc<str> as core::default::Default>::default;false;true;false;false
<collections::linked_list::LinkedList<T, A> as core::cmp::Ord>::cmp;false;false;true;false
<core::option::Option<u128> as vec::is_zero::IsZero>::is_zero;false;false;false;false
<collections::linked_list::LinkedList<T, A> as core::iter::Extend<T>>::extend_one;false;false;true;false
raw_vec::RawVec::<T, A>::non_null;false;false;true;false
<collections::btree::set::Union<'_, T> as core::clone::Clone>::clone;false;false;true;false
string::<impl core::convert::From<string::String> for borrow::Cow<'a, str>>::from;false;false;true;false
collections::vec_deque::iter::Iter::<'a, T>::new;false;false;true;false
<[T] as slice::SpecCloneIntoVec<T, A>>::clone_into;false;false;true;false
<boxed::Box<E> as core::error::Error>::source;false;true;false;false
collections::btree::navigate::<impl collections::btree::node::Handle<collections::btree::node::NodeRef<collections::btree::node::marker::Dying, K, V, collections::btree::node::marker::Leaf>, collections::btree::node::marker::Edge>>::deallocating_next;true;true;true;true
collections::btree::node::NodeRef::<collections::btree::node::marker::ValMut<'a>, K, V, Type>::into_key_val_mut_at;true;true;true;false
collections::btree::map::BTreeMap::<K, V, A>::upper_bound_mut;false;false;true;false
<collections::btree::set::BTreeSet<T, A> as core::fmt::Debug>::fmt;false;false;true;false
<rc::UniqueRc<T, A> as core::cmp::PartialOrd>::ge;false;false;true;false
sync::Arc::<[T]>::new_uninit_slice;false;true;false;false
<string::String as core::iter::Extend<boxed::Box<str, A>>>::extend;false;false;true;true
<sync::Arc<[T]> as core::iter::FromIterator<T>>::from_iter;false;false;false;false
<string::String as string::SpecToString>::spec_to_string;false;false;true;false
vec::Vec::<T, A>::allocator;false;false;true;false
collections::btree::set::IntersectionInner::Answer;false;false;false;false
<collections::btree::node::NodeRef<collections::btree::node::marker::Immut<'a>, K, V, Type> as core::clone::Clone>::clone;false;false;true;false
<ffi::c_str::IntoStringError as core::cmp::PartialEq>::eq;false;false;true;false
str::<impl str>::repeat;false;true;false;false
<collections::btree::merge_iter::MergeIterInner<I> as core::clone::Clone>::clone;false;false;true;false
<(A, B, C, D, E, F, G, H) as vec::is_zero::IsZero>::is_zero;false;false;false;false
collections::btree::map::BTreeMap::<K, V, A>::contains_key;false;false;true;false
<collections::btree::set::Range<'a, T> as core::iter::Iterator>::max;false;false;true;false
<rc::UniqueRc<T, A> as core::hash::Hash>::hash;false;false;true;false
boxed::thin::WithHeader::<H>::alloc_layout;false;false;false;false
collections::btree::map::entry::Entry::Vacant;false;false;true;false
rc::Rc::<T, A>::try_new_in;false;true;false;false
<collections::btree::set::Iter<'_, T> as core::clone::Clone>::clone;false;false;true;false
<collections::binary_heap::BinaryHeap<T, A> as core::iter::Extend<&'a T>>::extend_reserve;false;false;true;false
<collections::btree::map::ValuesMut<'_, K, V> as core::default::Default>::default;false;false;false;false
<collections::btree::set::BTreeSet<T, A> as core::iter::IntoIterator>::into_iter;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::pop_back;false;true;true;false
boxed::convert::<impl core::convert::From<&mut [T]> for boxed::Box<[T]>>::from;false;false;true;false
str::<impl str>::replace;false;true;false;true
vec::Vec::<T, A>::remove::assert_failed;false;false;false;false
rc::Weak::<T, A>::ptr_eq;false;false;true;false
boxed::Box::<[T]>::new_zeroed_slice;false;true;false;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<collections::btree::node::marker::Dying, K, V, NodeType>, collections::btree::node::marker::KV>::into_key_val;true;true;true;false
rc::Rc::<T>::new;false;true;false;false
collections::btree::map::BTreeMap::<K, V, A>::entry;false;false;true;false
collections::btree::map::BTreeMap::<K, V, A>::keys;false;false;true;false
task::LocalWake::wake_by_ref;false;false;true;false
<(F, G, H) as vec::is_zero::IsZero>::is_zero;false;false;false;false
<string::String as core::hash::Hash>::hash;false;false;true;false
<sync::Arc<T, A> as sync::ArcEqIdent<T, A>>::ne;false;false;true;false
collections::binary_heap::<impl core::convert::From<collections::binary_heap::BinaryHeap<T, A>> for vec::Vec<T, A>>::from;false;false;true;false
<bstr::ByteString as core::cmp::PartialEq<string::String>>::eq;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::ptr;false;false;true;false
collections::linked_list::LinkedList::<T, A>::back_mut;false;false;true;false
<vec::splice::Splice<'_, I, A> as core::iter::DoubleEndedIterator>::next_back;false;false;true;false
<string::String as core::cmp::PartialEq<&'a str>>::ne;false;false;true;false
vec::drain::Drain::<'a, T, A>::keep_rest;false;true;true;false
rc::Rc::<T, A>::weak_count;false;false;true;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<collections::btree::node::marker::DormantMut, K, V, NodeType>, HandleType>::awaken;true;true;true;false
<alloc::Global as core::alloc::Allocator>::allocate;false;false;false;false
collections::btree::node::BalancingContext::<'a, K, V>::steal_right;false;true;true;false
<<vec::drain::Drain<'_, T, A> as core::ops::Drop>::drop::DropGuard<'r, 'a, T, A> as core::ops::Drop>::drop;false;true;true;false
string::String::push_str;false;false;true;false
collections::btree::search::<impl collections::btree::node::NodeRef<BorrowType, K, V, Type>>::find_key_index;true;true;true;true
collections::btree::node::NodeRef::<BorrowType, K, V, Type>::last_kv;false;true;true;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<collections::btree::node::marker::Mut<'a>, K, V, collections::btree::node::marker::Internal>, collections::btree::node::marker::Edge>::correct_parent_link;false;true;true;false
<collections::vec_deque::iter::Iter<'a, T> as core::iter::Iterator>::__iterator_get_unchecked;true;true;true;false
<I as sync::ToArcSlice<T>>::to_arc_slice;false;false;false;true
<collections::vec_deque::into_iter::IntoIter<T, A> as core::iter::Iterator>::try_fold;false;false;true;true
string::IntoChars::iter;false;false;true;false
collections::linked_list::LinkedList::<T, A>::remove;false;false;true;true
vec::in_place_collect::<impl vec::spec_from_iter::SpecFromIter<T, I> for vec::Vec<T>>::from_iter;false;false;false;false
<[V] as slice::Concat<T>>::concat;false;false;false;true
collections::btree::set::CursorMut::<'a, T, A>::insert_before;false;false;true;false
<vec::Vec<T, A> as core::convert::AsRef<vec::Vec<T, A>>>::as_ref;false;false;true;false
<&&&&&&&&&&str as string::SpecToString>::spec_to_string;false;false;false;false
rc::Rc::<T, A>::pin_in;false;true;false;false
<rc::Rc<T, A> as core::hash::Hash>::hash;false;false;true;false
collections::linked_list::assert_covariance::c;false;false;true;false
<collections::linked_list::Iter<'a, T> as core::iter::Iterator>::size_hint;false;false;true;false
collections::vec_deque::VecDeque::<T, A>::allocator;false;false;true;false
rc::Rc::<T, A>::is_unique;false;false;true;false
boxed::box_new;false;false;false;false
<boxed::Box<T, A> as core::hash::Hasher>::write_u32;false;true;true;false
<collections::linked_list::LinkedList<T, A> as core::ops::Drop>::drop::DropGuard;false;false;true;false
<collections::btree::map::IntoValues<K, V, A> as core::iter::DoubleEndedIterator>::next_back;false;false;true;false
raw_vec::RawVec::<T, A>::ptr;false;false;true;false
<collections::btree::map::UnorderedKeyError as core::cmp::PartialEq>::eq;false;false;false;false
boxed::Box::<T>::pin;false;false;false;false
string::String::try_reserve;false;false;true;false
ffi::c_str::NulError;false;false;true;false
<&'a collections::linked_list::LinkedList<T, A> as core::iter::IntoIterator>::into_iter;false;false;true;false
<string::String as core::iter::Extend<&'a char>>::extend_one;false;false;true;false
sync::Arc::<[T], A>::new_zeroed_slice_in;false;true;false;false
vec::Vec::<T, A>::swap_remove::assert_failed;false;false;false;false
slice::<impl [T]>::to_vec_in;false;false;false;false
collections::btree::map::ExtractIfInner::<'a, K, V>::size_hint;false;false;true;false
<sync::Arc<T> as core::convert::From<T>>::from;false;false;false;false
collections::vec_deque::VecDeque::<T, A>::append;false;true;true;false
collections::vec_deque::VecDeque::<T>::with_capacity;false;false;false;false
<vec::drain::Drain<'_, T, A> as core::iter::Iterator>::next;false;false;true;false
vec::Vec::<T, A>::from_raw_parts_in;true;true;true;false
<alloc::Global as core::fmt::Debug>::fmt;false;false;true;false
<collections::binary_heap::BinaryHeap<T, A> as core::iter::Extend<T>>::extend_reserve;false;false;true;false
collections::btree::node::NodeRef::<collections::btree::node::marker::Mut<'a>, K, V, Type>::val_area_mut;true;true;true;false
raw_vec::handle_error;false;false;false;false
<bstr::ByteString as core::ops::DerefMut>::deref_mut;false;false;true;false
collections::btree::navigate::LazyLeafRange::<collections::btree::node::marker::Immut<'a>, K, V>::next_unchecked;true;true;true;false
<boxed::Box<T, A> as core::hash::Hasher>::write;false;true;true;false
str::<impl core::borrow::BorrowMut<str> for string::String>::borrow_mut;false;false;true;false
collections::btree::navigate::LazyLeafRange::<collections::btree::node::marker::ValMut<'a>, K, V>::next_back_unchecked;true;true;true;false
string::String::reserve_exact;false;false;true;false
collections::btree::map::entry::OccupiedEntry::<'a, K, V, A>::get;false;false;true;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<collections::btree::node::marker::Immut<'a>, K, V, NodeType>, collections::btree::node::marker::KV>::into_kv;false;true;true;false
<core::option::Option<i128> as vec::is_zero::IsZero>::is_zero;false;false;false;false
vec::cow::<impl core::convert::From<&'a [T]> for borrow::Cow<'a, [T]>>::from;false;false;false;false
vec::partial_eq::<impl core::cmp::PartialEq<&[U]> for vec::Vec<T, A>>::ne;false;false;true;false
collections::btree::map::entry::Entry::<'a, K, V, A>::key;false;false;true;false
collections::btree::search::<impl collections::btree::node::NodeRef<BorrowType, K, V, Type>>::find_lower_bound_index;false;true;true;false
ffi::c_str::CString::as_c_str;false;false;false;false
<collections::TryReserveError as core::cmp::Eq>::assert_receiver_is_total_eq;false;false;false;false
vec::Vec::<T, A>::resize;false;false;true;false
boxed::iter::<impl core::iter::FromIterator<I> for boxed::Box<[I]>>::from_iter;false;false;false;true
collections::btree::map::CursorMut::<'a, K, V, A>::insert_after;false;false;true;false
collections::btree::set::CursorMut::<'a, T, A>::peek_next;false;false;true;false
collections::linked_list::Cursor::<'a, T, A>::back;false;false;true;false
ffi::c_str::<impl core::convert::From<&'a ffi::c_str::CString> for borrow::Cow<'a, core::ffi::CStr>>::from;false;false;false;false
<rc::Rc<T, A> as core::cmp::PartialOrd>::gt;false;false;true;false
<string::String as core::iter::FromIterator<&'a str>>::from_iter;false;false;false;false
collections::btree::set::Union;false;false;true;false
<collections::binary_heap::Drain<'_, T, A> as core::iter::Iterator>::next;false;false;true;false
rc::Weak::<T, A>::new_in;false;false;false;false
collections::binary_heap::BinaryHeap::<T, A>::shrink_to_fit;false;false;true;false
<collections::vec_deque::iter_mut::IterMut<'a, T> as core::iter::Iterator>::last;false;false;true;false
alloc::Global::alloc_impl;false;true;false;false
collections::btree::node::NodeRef::<collections::btree::node::marker::Owned, K, V, Type>::borrow_mut;false;false;true;false
collections::btree::navigate::<impl collections::btree::node::Handle<collections::btree::node::NodeRef<BorrowType, K, V, collections::btree::node::marker::LeafOrInternal>, collections::btree::node::marker::KV>>::next_leaf_edge;false;false;true;false
<collections::btree::set::Cursor<'_, K> as core::fmt::Debug>::fmt;false;false;true;false
str::<impl str>::into_boxed_bytes;false;false;false;false
string::<impl core::cmp::PartialEq<string::String> for &'a str>::ne;false;false;true;false
<vec::into_iter::IntoIter<T, A> as core::iter::Iterator>::next;false;true;true;false
<collections::vec_deque::VecDeque<T, A> as core::cmp::PartialEq<vec::Vec<U, A>>>::eq;false;false;true;false
collections::binary_heap::Hole::<'a, T>::pos;false;false;true;false
string::String::remove_matches;false;true;true;true
vec::Vec::<T, A>::len;false;false;true;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<collections::btree::node::marker::Mut<'a>, K, V, collections::btree::node::marker::LeafOrInternal>, collections::btree::node::marker::Edge>::move_suffix;false;true;true;false
borrow::Cow::<'_, B>::into_owned;false;false;true;false
collections::btree::node::Handle::<collections::btree::node::NodeRef<collections::btree::node::marker::Mut<'a>, K, V, collections::btree::node::marker::Leaf>, collections::btree::node::marker::KV>::split;false;true;true;false
collections::btree::map::Cursor::<'a, K, V>::next;false;false;true;false
boxed::iter::<impl core::iter::FromIterator<&'a str> for boxed::Box<str>>::from_iter;false;false;false;false
collections::btree::navigate::<impl collections::btree::node::NodeRef<collections::btree::node::marker::Immut<'a>, K, V, collections::btree::node::marker::LeafOrInternal>>::visit_nodes_in_order;false;false;true;true
<collections::vec_deque::drain::Drain<'_, T, A> as core::iter::Iterator>::next;false;true;true;false
boxed::convert::<impl core::convert::From<E> for boxed::Box<(dyn core::error::Error + 'a)>>::from;false;false;false;false
collections::vec_deque::VecDeque::<T, A>::slice_ranges;false;false;true;false
string::String::pop;false;true;true;false
collections::linked_list::LinkedList::<T, A>::len;false;false;true;false
rc::RcInnerPtr::dec_strong;false;false;false;false
string::IntoChars::as_str;false;true;true;false
<collections::linked_list::IntoIter<T, A> as core::iter::Iterator>::next;false;false;true;false
<<collections::vec_deque::VecDeque<T, A> as core::ops::Drop>::drop::Dropper<'a, T> as core::ops::Drop>::drop;false;true;true;false
<boxed::convert::<impl core::convert::From<string::String> for boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync + 'a)>>::from::StringError as core::fmt::Debug>::fmt;false;false;true;false
vec::in_place_collect::from_iter_in_place;false;true;false;false
rc::Rc::<T, A>::new_zeroed_in;false;true;false;false
<boxed::Box<T, A> as core::hash::Hasher>::write_length_prefix;false;true;true;false
<collections::vec_deque::drain::Drain<'_, T, A> as core::iter::DoubleEndedIterator>::next_back;false;true;true;false
rc::UniqueRcUninit::<T, A>::into_rc;true;true;true;false
<<T as slice::<impl [T]>::to_vec_in::ConvertVec>::to_vec::DropGuard<'a, T, A> as core::ops::Drop>::drop;false;true;true;false
sync::Arc::<T, A>::ptr_eq;false;false;true;false
<collections::btree::set::IntoIter<T, A> as core::fmt::Debug>::fmt;false;false;true;false
<rc::Rc<[T]> as core::iter::FromIterator<T>>::from_iter;false;false;false;false
<sync::Arc<T, A> as core::cmp::PartialOrd>::gt;false;false;true;false
collections::btree::navigate::LeafRange::<collections::btree::node::marker::ValMut<'a>, K, V>::next_checked;false;false;true;false
<collections::linked_list::IntoIter<T, A> as core::fmt::Debug>::fmt;false;false;true;false
rc::Rc::<core::mem::MaybeUninit<T>, A>::assume_init;true;true;true;false
<rc::Rc<T> as core::convert::From<T>>::from;false;false;false;false
sync::Arc::<T, A>::drop_slow;true;true;true;false
<core::option::Option<boxed::Box<T>> as vec::is_zero::IsZero>::is_zero;false;false;true;false
<&'a collections::btree::set::BTreeSet<T, A> as core::iter::IntoIterator>::into_iter;false;false;true;false
"vec::partial_eq::<impl core::cmp::PartialEq<[U; N]> for vec::Vec<T, A>>::ne";false;false;true;false
<rc::Rc<T, A> as rc::RcEqIdent<T, A>>::ne;false;false;true;false
collections::btree::set::CursorMutKey::<'a, T, A>::peek_next;false;false;true;false
collections::vec_deque::iter_mut::IterMut::<'a, T>::as_mut_slices;false;false;true;false
